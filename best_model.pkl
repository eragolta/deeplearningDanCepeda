ccopy_reg
_reconstructor
p1
(cdeep_learning
Classification
p2
c__builtin__
object
p3
NtRp4
(dp5
S'layer_output'
p6
g1
(ctheano.tensor.var
TensorVariable
p7
g3
NtRp8
(dp9
S'auto_name'
p10
S'auto_20664'
p11
sS'index'
p12
I0
sS'tag'
p13
(itheano.gof.utils
scratchpad
p14
(dp15
S'trace'
p16
(lp17
(S'deep_learning.py'
p18
I214
S'__init__'
p19
S'self.output = activation(T.dot(input, W) + b)'
tp20
asbsS'name'
p21
NsS'owner'
p22
g1
(ctheano.gof.graph
Apply
p23
g3
NtRp24
(dp25
S'inputs'
p26
(lp27
g1
(g7
g3
NtRp28
(dp29
g10
S'auto_20659'
p30
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p31
(dp32
g16
(lp33
(g18
I214
g19
S'self.output = activation(T.dot(input, W) + b)'
tp34
asbsg21
Nsg22
g1
(g23
g3
NtRp35
(dp36
g26
(lp37
g1
(g7
g3
NtRp38
(dp39
g10
S'auto_20621'
p40
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p41
(dp42
g16
(lp43
(g18
I214
g19
S'self.output = activation(T.dot(input, W) + b)'
tp44
asbsg21
Nsg22
g1
(g23
g3
NtRp45
(dp46
g26
(lp47
g1
(g7
g3
NtRp48
(dp49
g10
S'auto_20618'
p50
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p51
(dp52
g16
(lp53
(g18
I214
g19
S'self.output = activation(T.dot(input, W) + b)'
tp54
asbsg21
Nsg22
g1
(g23
g3
NtRp55
(dp56
g26
(lp57
g1
(g7
g3
NtRp58
(dp59
g10
S'auto_20613'
p60
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p61
(dp62
g16
(lp63
(g18
I214
g19
S'self.output = activation(T.dot(input, W) + b)'
tp64
asbsg21
Nsg22
g1
(g23
g3
NtRp65
(dp66
g26
(lp67
g1
(g7
g3
NtRp68
(dp69
g10
S'auto_20609'
p70
sg12
Nsg13
(itheano.gof.utils
scratchpad
p71
(dp72
g16
(lp73
(S'deep_learning.py'
p74
I21
g19
S"self.input_variable = T.matrix('x')"
tp75
asbsg21
S'x'
sg22
NsS'type'
p76
g1
(ctheano.tensor.type
TensorType
p77
g3
NtRp78
(dp79
S'broadcastable'
p80
(I00
I00
tp81
sS'dtype'
p82
S'float64'
p83
sS'numpy_dtype'
p84
cnumpy
dtype
p85
(S'f8'
I0
I1
tRp86
(I3
S'<'
NNNI-1
I-1
I0
tbsS'sparse_grad'
p87
I00
sg21
Nsbsbag1
(ctheano.tensor.sharedvar
TensorSharedVariable
p88
g3
NtRp89
(dp90
g10
S'auto_20611'
p91
sg12
Nsg13
(itheano.gof.utils
scratchpad
p92
(dp93
g16
(lp94
(S'/Library/Python/2.7/site-packages/theano/compile/sharedvalue.py'
p95
I209
S'shared'
p96
S'utils.add_tag_trace(var)'
tp97
asbsS'container'
p98
g1
(ctheano.gof.link
Container
p99
g3
NtRp100
(dp101
g21
S'W'
sS'storage'
p102
(lp103
cnumpy.core.multiarray
_reconstruct
p104
(cnumpy
ndarray
p105
(I0
tS'b'
tRp106
(I1
(I15
I10
tg86
I00
S'\x1e\xd6\x0en\xe7\xf8\xda\xbf\xf9;Im\xd3\xc0\xc8\xbf\x11\xf5\xa1`m&\xe0\xbf\xb9\x12d\xf1\x19\x14\xcf?=\x8b\xfaa\x92\x99\xcb?\x8a\x99\x85\xab\x17\xcc\xc7\xbf\xf9:jR\xaf%\xca\xbfu\xc2\xb7\n\xda\xa4\xd3?:\n#\xbe\x1fr\xe8?\xd9N1{\x86\xc2\xde?\xc0\xa5\xf0s\x82]\xc4\xbf\xa7*w;v\x8f\xc0?X\x8c\xb7F7\xa5\xd5?1\x9c0\xf7\xa2F\xcd?j\xec\xe0;D2\xbf\xbf-\x1e\xc2\xcf\x9ck\xb7?\x90\xc2`\xdb/\xcc\xa5?x\xb1ZbB\\\xe0\xbf\x9a]\t:\xe94\xc7?fx\xe1\x1e6\x84\xd9?\xd4\xba| 6\xf8\xc2\xbf\x1f\xbb\n\xdb\xe4P\xca?\xa6e\x86\x80\x1e\xdf\xca\xbf\x02\xe8o\xf8\x99\x1d\xba\xbf\x95jG`kJ\xdc?\x88\xbc\xf9`\x9b\xad\xbc?3f\xb6\x946b\xb6\xbf\xde\x8c\x9d\x0e\x1a\xca\xcf?V\x9e\x01\xe35\xfe\xc6\xbf<\xbf\x00\xf9\xec\x06\xb8?\xb8\x8b!\xc3I\xa5\xcd?\x02EU\xedJ\x05\xc2\xbf\xeb\x9d~\x9f\x1a}\xc4?\x00b\x80\x9b\x7f\xc6\xd2\xbf\xec\xa9\xfa\xcf\xf2\x03\xc7?\x9f\xad\x1cq\x19;\xcd?\x03\xaf\x83\xf7\x8c:\xd1\xbf\x04J\x84\x13\xe19\xdd?\xcd6\x9b\xe5\xf6\xb0\xa6?^1\xa1\xa5\x14\x92\xe0?\xca\xbcA\xec\x9c}\xe1\xbf\x8b\x07\xe4\xe3\xd2\x82\xd8\xbf\xdf\xbf\xad\xe0)\x1a\xe2\xbfd\xb9@\xa1-\xd1\xcb?\xc3f\n\xdf!\x0b\xb3?wlk%|M\xb0?\xc3\xfd\x99\xab\xd8\x06\xdc\xbf4\xa0\x12O\x8eq\xbb?\xb9"\xcaa\x00W\xb0\xbf\xb3\xe3\xdf\x084E\xc0?*\x9f\x8d\xb0*E\xdb\xbf\xa3\xef\xd8\x90\x95A\xd8?*\x02\x1fS`\xf3\xdb?\xda\x9e\xfeJG0\xda\xbf\xa1?\x12\xbd\xf7s\x88\xbf\xc6\xff\xb7\x08\xa0\xfc\xe0?\x8fTS\x06\xe2E\xd6?\x86Z\x01\x83\xdb\x97\xde?9r\xe9\xde\xd10\x95?\xf4~\xb8\xc2S\xc2\xd5?\xda}\xac(\xf9\xf1\xd2\xbf\xa0\xb4\x92\xe2\tP\xc9?\x93\xb0.\xe5r\xd2\xba?\x9f\xf5l(\x85\x97\xd0\xbf\xdbx\\\x04\x95\xeb\xc4\xbf\x08\xce\xe6\xed$\xa9\xd7\xbf\x06AZ\xd14\x98\x93\xbfK\xa3\xfe@\xff\xc5\xdf?\x00\xea\xb9\x81\xb8;\xdd\xbf\xb1\xb6\x06\xa3\xe4\'\xd1\xbf\x04a\x97\x8c\x90\xb4\xcb?\xffD\x91\xc9=\xa3\xc5?E\xac\x9a\xd0\xffL\xb6?T\x0e\xc7!\xcf@\xd6\xbf\x8fP\x1e7\x91\x06\xcd\xbf4\x10;3\x01\xea\xd5?\x12\xa1\xe8\xb20\xb6\xb5\xbf\x0b\x13\xfdK\x99D\xa6?\xa8\xc7}\xa6\xa7\x9a\xe0\xbf\xc8\xf8b!\xf1|\xc6\xbf\x18\xbb\xd5X2w\xc5\xbf\xb1\x11\x12\x15\xdc&\xf8?N\xa4Y!%\x8b\x02@\xd2\xe5\xfc|nZ\xdd?\x14\xc0\x10@X#\xe6?\xb7\xc4\xb3\xab\xf9H\xe9\xbf\xd0\xda\xb6\xdb\xbe\xcd\xd0?\x01G\x073\x14\x85\xd9?x\x0cZ\xd1\x05\x1f\xe4\xbf\x01\x8c2\xd3\x0c\xb7\xb5?\xb4\x82<\xfe2\x1c\xd4\xbf\xf8\xa6\xae3/k\xe8?\xfb\x0c\xe6\xee|\xb7\xec?\xa3\xf6\x11b$Z\xe1?\xb7?\xc1\tD#\xe6\xbf^\x81|\xbb\xa9\xc5\xe7?\xd0\x0e\xd4D\xd5\x11\xdb?RY\x08\x1fD\xf6\xc3?\x0fP\x13\x9ab\xa4\xfb\xbf\xe0\xe6\xb6\r<\xc4\xc0?><\x89\xda\xd9P\xd0?\xb31\x95\x10\x9f\xa5\xd4?\xf9\x1c\x17:K\xc0\xdc?T\x8f\x9d\xf2\xe6\xae\xb4?Q\xd7\x97\x9e\xa9\xf5\xdb?f"~\x1a\xc4\xcf\xd4\xbf\xd3\xa5\x10\xf5\xefo\xdb\xbf\xed\xbe\x13\xe55\x87\xb5?\xa1\x87\r\xb09\xb7\xdf\xbf\xd6\xd4!\x05\x0e\xed\xdb?_\\\xd0\xb7F\xcb\xd2\xbf\xdf^\xa7\x82\x15s\xe3\xbf\xc1\xd6\xf9n\xf8+\xdf\xbf\xb3C\xf4\xba!\xeb\xd7?\xdc\xaap\xd5S?\xd5?w\x9eM\xd8F\x0e\xcd\xbfj\xbf\xdb4\x1a\xad\xc2\xbf\x9b\x84|j=&\xd2\xbf\xd7[\x08\x8a\xbfn\xe7?K\t\xda\x19\xb0\x83\xd4?U\x89\x84\x94\x92\x8e\xb8?\xac0m\xb8.\r\xba?\x1d\xff\x90\xba\xfe\xde\xc2\xbfH\xc1B\xa4\x02-\xb6?P\x13\xdf\x99\xbc\xb8\xd1\xbf$f\xbd\x18OV\xd1\xbf\xa0av\x0b*G\xc2\xbf\x12b\x8a \x18\x15\xc5?\xc9\xf3|2H]\xc5\xbf\xc2\xfd\xcdt\xd6\xe1\xd3\xbf\x96!?\x9b\xd2\x9d\xc6\xbf\xe1\r\xed\xa5\x8f-{?\x8cWk\xf6\x9f\xdb\xc9?\xb9TA\x0e>\xac\xcd\xbf\xa6\x94\x155\xd3\xc6\xd8\xbfx)\xaa#\xc4\xda\xd2\xbf\xb3p\x9e-C\xb0\xe0?a\xa9\xefj\x9b\x86\xd4\xbf\xe5\x1e\x01B~\x7f\xc5\xbf\x01\xa9\xca]\x7f\xde\xb0?%\x0f\xb9t~V\xde\xbfC\x99.\xe5\xc4\xf1\xd6?\xbc\xd2@\xff\\6\xdb?\xc4d.&\x8cC\xab?P\x1e\xd4;\xb3\xac\xd8\xbf\x9c\xe0\x9eW~-\xc6\xbf\x8c:\xd1\x0b\xc7\x18\xcb?\xbb#\x01\xd5\xb1\xc0\xd5\xbff[\xbf/Rw\xb5?iBlS\x8fZ\xcb\xbf'
tbasS'strict'
p107
I00
sS'readonly'
p108
I00
sg76
g1
(g77
g3
NtRp109
(dp110
g80
(I00
I00
tp111
sg82
S'float64'
p112
sg84
g86
sg87
I00
sg21
NsbsS'allow_downcast'
p113
Nsbsg21
S'W'
sg22
Nsg76
g109
sbasg13
(itheano.gof.utils
scratchpad
p114
(dp115
bsS'outputs'
p116
(lp117
g58
asS'op'
p118
g1
(ctheano.tensor.basic
Dot
p119
g3
NtRp120
(dp121
S'_op_use_c_code'
p122
S'/usr/bin/clang++'
p123
sbsbsg76
g1
(g77
g3
NtRp124
(dp125
g80
(I00
I00
tp126
sg82
S'float64'
p127
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp128
(dp129
g10
S'auto_20617'
p130
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p131
(dp132
bsg21
Nsg22
g1
(g23
g3
NtRp133
(dp134
g26
(lp135
g1
(g88
g3
NtRp136
(dp137
g10
S'auto_20612'
p138
sg12
Nsg13
(itheano.gof.utils
scratchpad
p139
(dp140
g16
(lp141
(g95
I209
g96
S'utils.add_tag_trace(var)'
tp142
asbsg98
g1
(g99
g3
NtRp143
(dp144
g21
S'b'
sg102
(lp145
g104
(g105
(I0
tS'b'
tRp146
(I1
(I10
tg86
I00
S'\xe4\x16y\x9e\xb6\x87\xc0\xbf\xf5+b|\x1a\xe7\xd3\xbf\xfaS\x12r\x88\x93\xdc\xbf\x16\xd0~\xcd\x96\xc2\xa0\xbf\xac\xdc\xbdv\x12g\xb2\xbfD\xdaC\rA\x00\xab?B\xe6l\xe1\xf8\xc3\x91?\x94:\x9e*A\x85\x8c?\x0b\xa8\x96\xc1.\xde\xd3?\xc4\xfe\xcdP+\x9d\xbf?'
tbasg107
I00
sg108
I00
sg76
g1
(g77
g3
NtRp147
(dp148
g80
(I00
tp149
sg82
S'float64'
p150
sg84
g86
sg87
I00
sg21
Nsbsg113
Nsbsg21
S'b'
sg22
Nsg76
g147
sbasg13
(itheano.gof.utils
scratchpad
p151
(dp152
bsg116
(lp153
g128
asg118
g1
(ctheano.tensor.elemwise
DimShuffle
p154
g3
NtRp155
(dp156
S'drop'
p157
(lp158
sS'shuffle'
p159
(lp160
I0
asS'augment'
p161
(lp162
I0
asS'input_broadcastable'
p163
g149
sS'inplace'
p164
I00
sS'new_order'
p165
(S'x'
I0
tp166
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp167
(dp168
g80
(I01
I00
tp169
sg82
g150
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p170
(dp171
bsg116
(lp172
g48
asg118
g1
(ctheano.tensor.elemwise
Elemwise
p173
g3
NtRp174
(dp175
S'__module__'
p176
S'tensor'
p177
sS'scalar_op'
p178
g1
(ctheano.scalar.basic
Add
p179
g3
NtRp180
(dp181
S'output_types_preference'
p182
ctheano.scalar.basic
upcast_out
p183
sg122
g123
sg21
S'add'
p184
sbsg21
S'Elemwise{add,no_inplace}'
p185
sg122
g123
sS'destroy_map'
p186
(dp187
sS'nfunc_spec'
p188
(g184
I2
I1
tp189
sS'inplace_pattern'
p190
(dp191
sS'openmp'
p192
I00
sS'__doc__'
p193
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p194
sbsbsg76
g1
(g77
g3
NtRp195
(dp196
g80
(I00
I00
tp197
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p198
(dp199
bsg116
(lp200
g38
asg118
g1
(g173
g3
NtRp201
(dp202
g176
g177
sg178
g1
(ctheano.scalar.basic
Tanh
p203
g3
NtRp204
(dp205
g182
ctheano.scalar.basic
upgrade_to_float
p206
sg122
g123
sg21
S'tanh'
p207
sbsg21
S'Elemwise{tanh,no_inplace}'
p208
sg122
g123
sg186
(dp209
sg188
(g207
I1
I1
tp210
sg190
(dp211
sg192
I00
sg193
S"hyperbolic tangent of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p212
sbsbsg76
g1
(g77
g3
NtRp213
(dp214
g80
(I00
I00
tp215
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g88
g3
NtRp216
(dp217
g10
S'auto_20657'
p218
sg12
Nsg13
(itheano.gof.utils
scratchpad
p219
(dp220
g16
(lp221
(g95
I209
g96
S'utils.add_tag_trace(var)'
tp222
asbsg98
g1
(g99
g3
NtRp223
(dp224
g21
S'W'
sg102
(lp225
g104
(g105
(I0
tS'b'
tRp226
(I1
(I10
I8
tg86
I00
S'\x88\x16\xbc\x8cQ\x90\xbe?+\xab<\xa8\xd3\xdb\xcd?\xe8\xbf\x96QU0\xd9?y\\\x97\xd0\xb4 \xd5\xbf\xf7\xed\xb0b\xb6N\xc6\xbf-\xffv\xba\xa0\xea\xc2\xbfY\xcfq\xca(4\xcf?%\xb0\xf1\x8e\x07\x9f\xd5\xbf\xbd\xa3@\xa6\r\t\x8a?\xebI\xf4\xcb\xc3\x85\xae\xbf\xf4\xf2\xbaeZ\xaa\x89\xbf\xc2;\x9d\xcdC\xed\xf5\xbf\x7f\x15\\\x8a\xa7\xf5\xc5\xbf\xfc\x1c1\x9c\xb1\xf0\x99\xbf\'\xa0\xf9\x07x)u?5 0\xc5\x02\xf2\xf9?h\x1d\xb3\xa0p\x86\xb2\xbfL\xacA\x89U\xbe\x90\xbfp+#\xf7cJ\x91?\x838\xb6\x89\xac9\x00\xc0\x9ci\xd4\xb4\x89]\xd6\xbf\x8fjqJ\xb9(\xce\xbf\n\xf2\xdf\x8d\xa2X\xaa\xbf\x182YGg\xe4\x05@\xff\xaf\xd5\xaf\xde\xaf\xab\xbfa\x8c\xed\x1a\xe0E\xc6\xbf\x82Z\x83\xe9`\x98\xd1\xbfg\xb7&\xc8\xddM\xca\xbf\xefoM\xe4\xd3\xcc\xce?\xad\xb0\xbc\xaa\x86\xe4\xbc?"\xdej\xb4\xa1\x04\xbb\xbfm\x05M\x81\xd8y\xdd?]Ev\xe5=#\xd1\xbf\x98-\xae\xe2\xa7a\xcc\xbf\xe3\xb6\xb2xf:\xcc\xbfj\xb0w\xac\'\xb8\xe1?\xe2\xc5\x1b(\x13X\xcc\xbfw\xa0\x1d\x9b\xe4\xf9\xd4\xbfM\x00\x1e\xec.\x87\xc7\xbf\x05\xed\xb8\xaf=u\xec?z\x8c#\x0b\x93\'\xc7?g\x90\x04"\xddi\xd1?\xe9\xb9Z\xe5:\xd4\xcd?\xc3W\x94,\xf0\xa6\xe5\xbf\xe9\t\x1fv\x1ah\xda?\xaf/\x18\xdbE\x83\xc4?\x8b!\xb1\xcd\x14\x14\xd0?\x9c\xa3;\xf9\xda\xab\xea\xbfi\xd8\xe5g]\xfd\xc8?\x88\x18"f\x96N\xd0?]\xe8\x0e\xc0k$\xd7?\x0b\x1d\x0e\xf1B\x7f\xe8\xbfs\xbd\x90\xa9\xee\xa7\xcb\xbfc\x8d\x17po5\x8b?\x03\x96T!9\xc9\xce?\xd9o\xa9\xbd\xeeu\xb5\xbfDai\xab\xb3S\xc1\xbf\r\xc7\x0fc\xf8h\xd0\xbf\xcd\x1f&\xedV\xb1\xd9\xbft\x9c\xd3\xee\x91#\xd4?hyFU\xa7\xbd\xc8?Y\x97\xc3\xc5d\xd7\xbe?x\xb9\x97d\xe0\x8e\xd4\xbf\xa3\x91\x9a\xbf\xca\x1a\xdf?\xe1\x06n\xbasn\xbe\xbf?\x8d\xa6\x08F\x15\x90\xbf\xe3\xfdB\x07\xfa\xaa\xa2?\xbbY)\x7f\xb9\xd8\xfd?J\xe7\xe4\xa9\xd7\x9a\xe5\xbf\xff\xd0\xc9\x1a|\xd4\xe0\xbf6q\x0e\xfa\xd9\xc7\x8c\xbf\x0c\xfc\x9c\xca6\xab\xe1\xbfg<\xa84\x128\xc0\xbfC\x94\x10\xf4\x02\xfc\xc7\xbf\xc6\x88\xcd\xfc\x8fH\xd6\xbf\xff\xc5\xcaq<\xea\xcd?)\x9f"\t\x04@\xcc?\xbbD-\xfbP\xcb\xbe?\xc8\xa5E2a\x98\xc8\xbfC\xc0\n\xae\xd6\xe6\xd1?'
tbasg107
I00
sg108
I00
sg76
g1
(g77
g3
NtRp227
(dp228
g80
(I00
I00
tp229
sg82
S'float64'
p230
sg84
g86
sg87
I00
sg21
Nsbsg113
Nsbsg21
S'W'
sg22
Nsg76
g227
sbasg13
(itheano.gof.utils
scratchpad
p231
(dp232
bsg116
(lp233
g28
asg118
g120
sbsg76
g1
(g77
g3
NtRp234
(dp235
g80
(I00
I00
tp236
sg82
S'float64'
p237
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp238
(dp239
g10
S'auto_20663'
p240
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p241
(dp242
bsg21
Nsg22
g1
(g23
g3
NtRp243
(dp244
g26
(lp245
g1
(g88
g3
NtRp246
(dp247
g10
S'auto_20658'
p248
sg12
Nsg13
(itheano.gof.utils
scratchpad
p249
(dp250
g16
(lp251
(g95
I209
g96
S'utils.add_tag_trace(var)'
tp252
asbsg98
g1
(g99
g3
NtRp253
(dp254
g21
S'b'
sg102
(lp255
g104
(g105
(I0
tS'b'
tRp256
(I1
(I8
tg86
I00
S'\x1a\xa5y&\x85\x9f\xc4\xbf\x1d{\x0c\xa4\\8\xd3\xbfL\xda\xa6\x08\xcd\xd1\xdd\xbfc\x07D\xd4U\xec\xe7?\x92\x8ed\xfb:]\xbc? \xe22\xf1\xd7=\xc0?\xf6\xdd\xb8\xdf\xca\xf0\xd2\xbfo\xc5\\\x7f\xa1w\xce?'
tbasg107
I00
sg108
I00
sg76
g1
(g77
g3
NtRp257
(dp258
g80
(I00
tp259
sg82
S'float64'
p260
sg84
g86
sg87
I00
sg21
Nsbsg113
Nsbsg21
S'b'
sg22
Nsg76
g257
sbasg13
(itheano.gof.utils
scratchpad
p261
(dp262
bsg116
(lp263
g238
asg118
g1
(g154
g3
NtRp264
(dp265
g157
(lp266
sg159
(lp267
I0
asg161
(lp268
I0
asg163
g259
sg164
I00
sg165
(S'x'
I0
tp269
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp270
(dp271
g80
(I01
I00
tp272
sg82
g260
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p273
(dp274
bsg116
(lp275
g8
asg118
g174
sbsg76
g1
(g77
g3
NtRp276
(dp277
g80
(I00
I00
tp278
sg82
g83
sg84
g86
sg87
I00
sg21
NsbsbsS'layer_n_out'
p279
I8
sS'L_reg'
p280
g104
(g105
(I0
tS'b'
tRp281
(I1
(I2
tg86
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00-C\x1c\xeb\xe26\x1a?'
tbsS'learning_rate'
p282
F0.01
sS'rng'
p283
cnumpy.random
__RandomState_ctor
p284
(tRp285
(S'MT19937'
p286
g104
(g105
(I0
tS'b'
tRp287
(I1
(I624
tg85
(S'u4'
I0
I1
tRp288
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'Z\xa6\xb9\x86\x86`\xcc\x14\xc0\xb61\xca\xe8Td\xadp\xfaa\x08\xc5\xed\x9c<\xb0[\x7f\xf1\xfa\xf3::\xab|\x0ea-L\x9c7\xda\xff\xe9\x18dO%\xb9\xfd\xb3R\xe5CM\xaf\xa9\xa3\xc9\x82n\x92=\xfd\x8c\xf6A\xa2%\xd8q4\xb3\xc3\xb7\x92n\xc8\x80\xb6\r\x97_6-H\x19+wo}\xd0\x8b}J\xd4\xf8\xd8\x05\xb9\x10\x8c\x98\xb3e\x89\xe5J\xf9\xe5%z<\x8fYf$?B\xf8\x8aj~\x95\xcc\xe14\x9eME9\xbc\x92\x04Z1H\xc2|\xf7\xb9\xc6N\x80\t\xdc^\xd0.WS\xc7AP\xbe\n\x82\x82-\xa0\xeeB\xfd\xb3\xc6\xc6h\xfc\x80&#v\xc6\x17\xb9\x98\xc6\x1f:\xac\x02o\x93\x9c~!\xc0\x99\xf4\x0fK\\vdy\x9a\xc0E\xd3\xbb\x99\x8f\xf3\xebya\x99bd+\x9a\xb1\xf4\xa0\xd0\xc5\x0f\xf0\x87\x13\xcek\x1c\xf9\xd8R\xd9,\xc54\xbc\xeco\x83\xff\xa0c\xa0\x022\x1d8lF\xd9E\xe2\xc6>\xf4\x81\xbd\xf4\xdfX\xfa\xcb\x17\x81\xe4\x9b\x1d\x96\x8ak\x8a\xa7\xfd\xd2c\x1a\xc8\xcd\x80\x90\xff\x8eM\xddJ]\xffm\x81\x939\xe1\x82DN\xfe\x15\xdb?\xe6L\xd5\xe6\x93\xa9\x7f\x80z4\xe9m\xc1j\xe7\xa1\xe1\xed\x1d`[\xdc\x86\xab\xb1\x83\x0e+\xaa\xbe\xda\xfc\x0ff\xad\x9c\xf4\xfb\x96\xb5\x0f\xf7dg\xc3z=\x15%058\x7f\xceG\\2\x99\xa5\x12V\x02\xb9\xda\xebD\\(\x9eZ\x8d\xb4|\xd4\x8c\x86d\xdb#\xb95*\xf8QhM\x88\xb2\x04\xcb\xc9\xe1\xb6\xbe\xcc\xdb\xbe\x0e\xe6\x89\xe5@\'\xa6Q%d:\xab\x8d\x17|\xabRr\x18\x04\xe9\x81\x0b\xfe\xbe,|\x08*L\x06\xbc\x80\xc3\xc6=\xb89Y\xed\xb5\x9d\xb5-\x96U\xef\xce\x04\x1bW\xc1\xf8\x90\x15I\x96\x97\xe0\xad>:@\x8dL\x16\xe5<\xf4hn\xa3\xd8O\n+\xc4\xf2\'\xb5\x92Y\xd2#QKCLA\x85\x99\x9cq\xdfF\x13G\x06\xf7\xf0H\xd0\x7f\\\xfe4\x9b\xdcG\\\xc1\xcfB\xeae\xbe2Kh\xc7\xa1\xdc\xa7\xc8\xc5\xa2\xec\xc4\xcd\x8a\xa7aa\\q\x8e\xc54\xc8\xb0\x86\xfc\xea\xd7Y\xf9\xeb\x9d\xf4\xa0\xec[%\xf9:o\xf9NE\x11\xa3\xde\x904\xf1\xc6\\\x1cm\x14\xa2(\xedF\xff\xe1\x9f/\xf2\x1fh\xcfl"5\xa4\xe0\xae\xd5\x1a*\xdeR{e\xf3\xc7X\xf6\xe8h\xb7I\xb7p\xa5H\xab\x91X\xab\x07\xa6qN\xf7BQ\xf4\xca\xd6D\x15v\xc5\x9e8\x82\xbb\xd1\xe4\x9f2\xc0\xc6{u|5(\xc5\xd87\x1c>4\x7f\x1daO\xb9\xe1\x9ef\x80\xa1\xd9\x7f\x7f\x93\xc9\xf3N\x82\xeaH\x96u\xe1p\xaaT\xca\xef;\xb9\x83\x8e\x9c\r\n+%\x95\xd9\x1f\x84\xcc\x7f\xf2\x94W\xc4\xee@[k\xc8Z\xa6h\xa4\xe9M\xfc\xa2\x89\xc0\xd79E\x9f\x8e\xb3v\xb9[B\x0e\\\xea\xfbU\xd4\xea\xee\xa5ZG\x84\x8c#\xe13\t\x94\xf7\x94\xa8\xd4\xd1\xb7\nP\xb1we@\x9fD\xac\xf3N\x81\xe3/\'\x8ez\xa2\x16`\x9d\xa6h\x81\\M\xf7\xc5\xb2\x1f\x8aN\xd2\xccgV\x87\x16\xf9}\xaa\xbd\x84\xc5.\n\x96Z\xb4\xac\xc2\x9c\xed;\xe9\x92\x86}\x94\x00\xa6\x96\xba>\x8e*\xf3\xd9\x8f\xd9^\xa9\x93\t\x03\xd8E\x08\xdb\xb1\x80Y\x8d!\xdf\x87\xfbt\x9d\x01\x9d$\x05\xd5\xce.\xedi\xbc\xfe\xf8:\x8dpu\x0b\x10\xbd\xc0\xdf\x89,\xdfA\xf2\x15\x03\xdfF\xe3Nm\xcef\xeaE\xa4(\xcb\xbf?\xf6\xf91\xc7\xb2\x80\xd1\x9e\xab\x0e,\x13\xdaK\x99\xee\x8b#\x11\xd6\x9e\xca\x90P\xa7\xa4\xd9\xee\xc1\xeef\\w\x07\x14\xf9a\x81\xf5\xbeFB\x0e\xa4\xbf(\x1c(\xf0\x996\xab?\xe4\xca\x896"M${\xa5d\xdf\xfe\xd1PE\xd2\x97\xd0\x1e\x8fqy22C\xfeF\x1e;P\x91k\xff$$9\xa7H\xa0\xa9\xffQ\xa2\xa6\xde\xc0\xad\rK\xcf*.+\xe6\xa9\x7f\xeb>cj\x81\xe3\x1ddl\xa4\xdb\x9d\xbc[\xd2\x90\xed-+\xa4\x00\xc4mU\'W\x84\x07\xbe\xdb\xbc\xd8\x18\x17*\xbc\xea\xa5\xb9\xcf\x9e\x87\xab\x84\xa0\xe2t\x1c;\xb91\xae:{u\xcd\x10R\xcb\xf5\xb7\xaf\xd0`\x1d\x14=Q\x17\xfbt"R?\xd3FPB\x9a\xfd0\x8e\xce{(Z\xa5\xc1\xd8\xaf\xd76.0Q.\xafx\xce6Yg\xe78\xe1\x97\x95\xdemAn9#W\x02a#\x10i$\xa4\xb9\xad\xd9\xba\xa8>y\x97\xcaH\xd3\xf3i\xa0\x04\xfaR\x1b\xf61.\x9e^:\xcd\xb8PH\\\xba\xd7\xdd\xc2\xd3e\xd8\xb8|\x13Q\xf6\xaaz\xb1\xc21\xce\x92k\x9eW2\xbdRA\xb7,\xf0\xa0\x0c\xd9\x9fQ\x80\x81\\\x0e\xa3E\x91\x15[\xb0T9\xeeg\xa2\x82e\xe53\xc5b\xe5{z\x0fJB\xfe\xff[\x80E\xcb\x9d`\xcf\xff\xc8\x91\xcdQM`\'[\x92\xdf;\x1f\xb4{\x1a\xa28-\xb8o\x8b#\xcd\xdbrsz\xd2\xd5\x02+\xee\xf7b\xa7w\x1f\xc2\xede\x81\xaf\xb1d\xd7\xff\xbd\x93\xa1Ze\xfd\xc8\xb8\x1bci5{\xa8\xa5\x8d.\xd9\xab.\xd6\x04e4\r\xee\xd4\xe3\xf1~\x15\xef\x9d\x99DNW\x95\x9ah\x81\xe7I\x8e\x10\xd7\xd0i\x9e\x127%f\xb9\xf9|\x89^h\x81r\x81\x05\xe3\xb8b~\x92\'g\xed\xb4}t\xe6\x9d_\xb8\xc5\xdf,\x14\xf0n\x80\x1a\n\xf2\x7f\xfaj\xd6\x8b\xd5\x93\x8b\r-\xf9\xb8\xcc\xd9\x0b\xd1l\x18w\x9d$\xe1\xb8\x18f\xdcQ\xe1\x06Px\xc0\xce\x8f\xde;\xe3\x85\x93\x9b\x08P\xf5V](\x1e\xc5\xf0\xee,M\xfb\x89\xdf(c\x04D\xef\x85\xd5&q\xb6\x84i\\]\xce\xb1\x9f\xc9\x8c\xd1\x95\x95\x97sPKr\x03\x13Q(]\xe5l\x08\xd9I\xa1\xd1\xd2M`A\xc5~\xff\xde\xd2-\xfc\x9fy\x9e\xb2\xac\x14\xc1d#\xab=\xacv\xde\x10\xe0r\xc2\xac\x0b\xcc\xe91\'2\xbb\xb7\xe5\xb8\xafg\x1a$\xdf\xc6Z\xd7\xc8C\x1f\\\xf3\xdf\xfdz\x93d\\6\xbbf\xf8\xdc\x05W\t\x93\xc5\x8e\xfc\x11\xb9\xa1\xe6\xe4\x87\xf3k|;\xcbF\xe4\xd7$\xa3\xb72\xd6S\xaf\xc9\xc2\x19\xeae\x880\xb9\x05*\xf6\xaaF\xa4s\x1b7\xa3^\x0b\xa1N\xe9\xc7\xe1P\xac\x05_\xfa\x96\xe2\xbf\x88\xfb\x88\xf1\xf96H\x8c{\xdb\xa9\xda\xcb\xd1\xaa\xee\xa2o#z\xf1\xcb\xe3\xdb\xdbP\xc8\xe5\x94\x9e\xe7\n\x98\x9a\xfaT\rm\xf0U\xb2\xf2\x1f\xc8\xac\xd4\xac\xcb\x1a\x9b\xbe\xdf\xb8\x9c=$>\xc0\xd2\xf3\xf2\xd8\xd8>|SO\x12\xe1-\xf4\x8f3\xd1\x95U\xd9C\xdb\x85:UPj\x95\xb4@\x81U\xd12\xa3\x84\xa0!\xc3N\xb4\x93\xe2\xe1\xae\x88X*\x10\x1f\x06VH\x96\xc3\xc8\x1bA+\xc3X\x11\xa4\xe9\x90\x80^\xads\xec\x8c\xa5n\xa2\xedK\xdc\xac@\x8a\x10L\xa9\x8f\x96\x06\x86\xb6\xdf\x9e\x9fz\xe4\x07\xd5\xf6X\x1c\x12\x1a\x0c\xc1\x1c\x8e\x82\x13\xf2\xc6\xd7\xe9\xf6\xad\x9c\xbc\x1d\xc2\x85\xe2q\xfeK4\x11N\xe5\x92\xad\x1c9Z\xb5PKOq\x18\xa7\xd1\xce\xec/\xad\xfdv"\xf4\xf4\xa9\xc0-O!\xe3;K\xed\x9eB\xacX\x10~\xae\x8d\xb5\t\xdc2\x9e<r3\x14\x7f\xb5\x0c\x08q\xfdi\xdd\x01<\xe5B\n\xdd\rsF]IZ\x9f\x8d\xdb\x9d\xf2\x93\xe7\x9e\xd6\xf5\x9dr\xac"\xe3\x8f\xe9mWQ\xfb\xa7\x97\x179\xfe\xdf/?\xb2Q\x96\xfc\xda\xa8%\x9a\x96\x00"Sq\xaf=\xdf\x7f\xaf\n\x82\xc2,\x85\xdf\xbb\xae\x9f@:K\x84\xbc\x93\x82\x82\xd25_\xbc\x8dr\xb1y\xdc\xed\x02\xb2"{\x82\xe3$\xc6\r\xb6E\t+sv|\x0e\x1d~\xb5\xc5\x92\xd0\xb3V\xd9\xdc\x95\xeeE9\xaaX \x9en\x18h\xff\xe7-x\x82\xae\x05\x03.\xa9\x81\xadi5\xfa\xbai\xc2\xba\x98i\xdd!\x9f\x86\x0e\r\r_E\x1a\xa3\xa9\xd5\xf0}\xecb6\x82\x04\xd8\xad\xbaq~\x8cv\xf9\xc1\xfbu\xabL\x9e\x068\x95\xefM7\xc0\x90`\xf3\xb7\xc6Rt\xdcB\x1e\x97\xd4X\xbe\x1a\x1d\xde\xa1\x00\x1ch\xadh\x0f\x03?\xb2\xe9\xbd8T\x19)X\xb6\xdd\x06\x93\x9d\x14\x99\x06\x9b\xa5G\x9a\x18\xba%\xe8\x16\xfa>Q\x1et\xb6\x98\xc5\x93 (Zl\xf6\xcdo\xa9\x0e\x13\xbc\xab\xde\xcb\xae#\xaf\x9av\xb2\x97\xeb\xd13&2i:U\xc3|K\xeb\x9b@\x9a\n\x15`\xf6\x835\xfe\xbc\xb94\xf3,o\x8c\xaa\xca\xcf\r\xd1\xf5n\x99\xd6[\xcf\x006\x1c\x963\xcd4\xd7\xf47\xd3\x8eb\x94-\xee\x9d\xf4\x1c\x94E~\x9a\x8b]K\x94\x1e\xd7\xc6%m\xcel(QFY \x14~\x93MY\xed_@\n\x1d\x1a]\xe5\x8c\x11\xe6\x01\xde\xcfM\xa2\x87ujT\xe4\x9f+\x10\x15:=\xf6B]\x02Md-as\x93\xe1\xb4\xecS$\x99k^z\'\x1b\xf1h\xd7\xda`\x06\xd3\xbcs\xf2\x10\x95\xf7\x93\xe6\xbf\xd9\xe8\x0b\x01[M\xddN\xde\xce\xc3\xd8\x13(\x1f*e\xff\xa0h\xfb`\xe7\x12\xe7J\xbc\xec\xac\xee\xf0\x10`\x8ey\xe8\x97\xb0\xcd9\xfe(\xcc\x96\x04\xc7\xbdX\xe0\xc7;\x17e\xe8}^\x07\x03\xb7q\r_d\xc5\xdcJ\xe7\xb6\xf1@\x1b\x98v\x9a\x16%"*\x1dc\x90\xc1\x15\xee\xff\xe5I\xf7\xdf\xa1Y\xc5yH\xa4O\xf6\xe6_\xd1\xfc\xbbt\xcd{\x87\xcc\x03\x83\x05\'U\xee\xeb\xa2\x9b!\x88\xe2\xef\xa9\xa1\xa5!\xb9\xff\xb6\xf2{O\xea2H\x0fF\xad\x03X\x90/v\xcf\xb3\xf8~\xef\xb3\xd8\\\x1e\x0fFH\xf9^\xdaG\xc5"\x0b\x0b\xe6WN\xf8\xf3K\x16.\t\xb0\x8b\x14\xda\xe53S\xcc\xc6\x00\xdd\xb3\xae\x8fO\xda\xed7\x9c\x11?Ysjf\xbb\nix\x17\xf3\x00\xb7\x81g\x1e|.\xd9e\xf8\xa3\xc5\xc5\x0f\\\x14\xa1f\\\xa7\xd3\x1cP\x17.B\x11\x93\xcb\x8d)\xa9\xfa\x97#\xb5\x8aM\x18\xe4\x88\x08\x1a\x19$&#\xe4\x86 !U\xabU\x98/\xf1\xa3\xc2a\xc4N\xaa\x91\x06\xc4qo`\xa2R\x16\xdc\xce\x86\xa3\xbf\xce\xc0\xcd\xfbAp\xed\x9b\xf5\xe5c\x04\xfaQ\xaf\xdd\x86\xee\xb1'
tbI300
I0
F0
tbsS'cost'
p289
g1
(g7
g3
NtRp290
(dp291
g10
S'auto_20733'
p292
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p293
(dp294
g16
(lp295
(S'deep_learning.py'
p296
I192
g19
S"self.cost += -T.mean(T.log(p_y_given_x)[T.arange(self.output_variable.shape[0]), self.output_variable.astype('int32')])"
tp297
asbsg21
Nsg22
g1
(g23
g3
NtRp298
(dp299
g26
(lp300
g1
(g7
g3
NtRp301
(dp302
g10
S'auto_20698'
p303
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p304
(dp305
g16
(lp306
(S'deep_learning.py'
p307
I46
S'add_layer'
p308
S'self.cost += sum(self.L_reg * layer.L)'
tp309
asbsg21
Nsg22
g1
(g23
g3
NtRp310
(dp311
g26
(lp312
g1
(g7
g3
NtRp313
(dp314
g10
S'auto_20656'
p315
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p316
(dp317
g16
(lp318
(g307
I46
g308
S'self.cost += sum(self.L_reg * layer.L)'
tp319
asbsg21
Nsg22
g1
(g23
g3
NtRp320
(dp321
g26
(lp322
g1
(ctheano.tensor.var
TensorConstant
p323
g3
NtRp324
(dp325
g10
S'auto_37'
p326
sg12
Nsg13
(itheano.gof.utils
scratchpad
p327
(dp328
S'unique_value'
p329
Nsbsg21
NsS'cached'
p330
I01
sg76
g1
(g77
g3
NtRp331
(dp332
g80
(tsg82
S'int8'
p333
sg84
g85
(S'i1'
I0
I1
tRp334
(I3
S'|'
NNNI-1
I-1
I0
tbsg87
I00
sg21
NsbsS'data'
p335
g104
(g105
(I0
tS'b'
tRp336
(I1
(tg334
I00
S'\x00'
tbsbag1
(g7
g3
NtRp337
(dp338
g10
S'auto_20651'
p339
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p340
(dp341
g16
(lp342
(g307
I46
g308
S'self.cost += sum(self.L_reg * layer.L)'
tp343
asbsg21
Nsg22
g1
(g23
g3
NtRp344
(dp345
g26
(lp346
g1
(g7
g3
NtRp347
(dp348
g10
S'auto_20647'
p349
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p350
(dp351
g16
(lp352
(g307
I46
g308
S'self.cost += sum(self.L_reg * layer.L)'
tp353
asbsg21
Nsg22
g1
(g23
g3
NtRp354
(dp355
g26
(lp356
g324
ag1
(g7
g3
NtRp357
(dp358
g10
S'auto_20637'
p359
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p360
(dp361
g16
(lp362
(g307
I46
g308
S'self.cost += sum(self.L_reg * layer.L)'
tp363
asbsg21
Nsg22
g1
(g23
g3
NtRp364
(dp365
g26
(lp366
g1
(g323
g3
NtRp367
(dp368
g10
S'auto_27'
p369
sg12
Nsg13
(itheano.gof.utils
scratchpad
p370
(dp371
g329
Nsbsg21
Nsg330
I01
sg76
g1
(g77
g3
NtRp372
(dp373
g80
(tsg82
S'float32'
p374
sg84
g85
(S'f4'
I0
I1
tRp375
(I3
S'<'
NNNI-1
I-1
I0
tbsg87
I00
sg21
Nsbsg335
g104
(g105
(I0
tS'b'
tRp376
(I1
(tg375
I00
S'\x00\x00\x00\x00'
tbsbag1
(g7
g3
NtRp377
(dp378
g10
S'auto_20625'
p379
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p380
(dp381
g16
(lp382
sbsg21
Nsg22
g1
(g23
g3
NtRp383
(dp384
g26
(lp385
g1
(g7
g3
NtRp386
(dp387
g10
S'auto_20624'
p388
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p389
(dp390
g16
(lp391
(g18
I216
g19
S'self.L = numpy.array([abs(W).sum(),(W ** 2).sum()])'
tp392
asbsg21
Nsg22
g1
(g23
g3
NtRp393
(dp394
g26
(lp395
g89
asg13
(itheano.gof.utils
scratchpad
p396
(dp397
bsg116
(lp398
g386
asg118
g1
(g173
g3
NtRp399
(dp400
g176
g177
sg178
g1
(ctheano.scalar.basic
Abs
p401
g3
NtRp402
(dp403
g182
ctheano.scalar.basic
same_out
p404
sg122
g123
sg21
Nsbsg21
S'Elemwise{abs_,no_inplace}'
p405
sg122
g123
sg186
(dp406
sg188
(S'abs'
p407
I1
I1
tp408
sg190
(dp409
sg192
I00
sg193
S"|`a`|\n\n    TensorVariable overloads the `TensorVariable.__abs__` operator so that\n    this function is called when you type abs(a).\n\n    \n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p410
sbsbsg76
g1
(g77
g3
NtRp411
(dp412
g80
(I00
I00
tp413
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p414
(dp415
bsg116
(lp416
g377
asg118
g1
(ctheano.tensor.elemwise
Sum
p417
g3
NtRp418
(dp419
S'acc_dtype'
p420
g83
sg82
g83
sg122
g123
sg178
g180
sS'axis'
p421
Nsbsbsg76
g1
(g77
g3
NtRp422
(dp423
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p424
(dp425
bsg116
(lp426
g357
asg118
g1
(g173
g3
NtRp427
(dp428
g176
g177
sg178
g1
(ctheano.scalar.basic
Mul
p429
g3
NtRp430
(dp431
g182
g183
sg122
g123
sg21
S'mul'
p432
sbsg21
S'Elemwise{mul,no_inplace}'
p433
sg122
g123
sg186
(dp434
sg188
(S'multiply'
p435
I2
I1
tp436
sg190
(dp437
sg192
I00
sg193
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p438
sbsbsg76
g1
(g77
g3
NtRp439
(dp440
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p441
(dp442
bsg116
(lp443
g347
asg118
g174
sbsg76
g1
(g77
g3
NtRp444
(dp445
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp446
(dp447
g10
S'auto_20642'
p448
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p449
(dp450
g16
(lp451
(g307
I46
g308
S'self.cost += sum(self.L_reg * layer.L)'
tp452
asbsg21
Nsg22
g1
(g23
g3
NtRp453
(dp454
g26
(lp455
g1
(g323
g3
NtRp456
(dp457
g10
S'auto_20638'
p458
sg12
Nsg13
(itheano.gof.utils
scratchpad
p459
(dp460
g329
Nsbsg21
Nsg76
g1
(g77
g3
NtRp461
(dp462
g80
(tsg82
S'float64'
p463
sg84
g86
sg87
I00
sg21
Nsbsg335
g104
(g105
(I0
tS'b'
tRp464
(I1
(tg86
I00
S'-C\x1c\xeb\xe26\x1a?'
tbsbag1
(g7
g3
NtRp465
(dp466
g10
S'auto_20632'
p467
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p468
(dp469
g16
(lp470
sbsg21
Nsg22
g1
(g23
g3
NtRp471
(dp472
g26
(lp473
g1
(g7
g3
NtRp474
(dp475
g10
S'auto_20631'
p476
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p477
(dp478
g16
(lp479
(g18
I216
g19
S'self.L = numpy.array([abs(W).sum(),(W ** 2).sum()])'
tp480
asbsg21
Nsg22
g1
(g23
g3
NtRp481
(dp482
g26
(lp483
g89
ag1
(g7
g3
NtRp484
(dp485
g10
S'auto_20630'
p486
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p487
(dp488
bsg21
Nsg22
g1
(g23
g3
NtRp489
(dp490
g26
(lp491
g1
(g323
g3
NtRp492
(dp493
g10
S'auto_20'
p494
sg12
Nsg13
(itheano.gof.utils
scratchpad
p495
(dp496
g329
Nsbsg21
Nsg330
I01
sg76
g1
(g77
g3
NtRp497
(dp498
g80
(tsg82
S'int8'
p499
sg84
g334
sg87
I00
sg21
Nsbsg335
g104
(g105
(I0
tS'b'
tRp500
(I1
(tg334
I00
S'\x02'
tbsbasg13
(itheano.gof.utils
scratchpad
p501
(dp502
bsg116
(lp503
g484
asg118
g1
(g154
g3
NtRp504
(dp505
g157
(lp506
sg159
(lp507
sg161
(lp508
I0
aI1
asg163
(tsg164
I00
sg165
(S'x'
S'x'
tp509
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp510
(dp511
g80
(I01
I01
tp512
sg82
g499
sg84
g334
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p513
(dp514
bsg116
(lp515
g474
asg118
g1
(g173
g3
NtRp516
(dp517
g176
g177
sg178
g1
(ctheano.scalar.basic
Pow
p518
g3
NtRp519
(dp520
g182
g183
sg122
g123
sg21
S'pow'
p521
sbsg21
S'Elemwise{pow,no_inplace}'
p522
sg122
g123
sg186
(dp523
sg188
(S'power'
p524
I2
I1
tp525
sg190
(dp526
sg192
I00
sg193
S"elementwise power\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p527
sbsbsg76
g1
(g77
g3
NtRp528
(dp529
g80
(I00
I00
tp530
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p531
(dp532
bsg116
(lp533
g465
asg118
g1
(g417
g3
NtRp534
(dp535
g420
g83
sg82
g83
sg122
g123
sg178
g180
sg421
Nsbsbsg76
g1
(g77
g3
NtRp536
(dp537
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p538
(dp539
bsg116
(lp540
g446
asg118
g427
sbsg76
g1
(g77
g3
NtRp541
(dp542
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p543
(dp544
bsg116
(lp545
g337
asg118
g174
sbsg76
g1
(g77
g3
NtRp546
(dp547
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p548
(dp549
bsg116
(lp550
g313
asg118
g174
sbsg76
g1
(g77
g3
NtRp551
(dp552
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp553
(dp554
g10
S'auto_20694'
p555
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p556
(dp557
g16
(lp558
(g307
I46
g308
S'self.cost += sum(self.L_reg * layer.L)'
tp559
asbsg21
Nsg22
g1
(g23
g3
NtRp560
(dp561
g26
(lp562
g1
(g7
g3
NtRp563
(dp564
g10
S'auto_20690'
p565
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p566
(dp567
g16
(lp568
(g307
I46
g308
S'self.cost += sum(self.L_reg * layer.L)'
tp569
asbsg21
Nsg22
g1
(g23
g3
NtRp570
(dp571
g26
(lp572
g324
ag1
(g7
g3
NtRp573
(dp574
g10
S'auto_20680'
p575
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p576
(dp577
g16
(lp578
(g307
I46
g308
S'self.cost += sum(self.L_reg * layer.L)'
tp579
asbsg21
Nsg22
g1
(g23
g3
NtRp580
(dp581
g26
(lp582
g367
ag1
(g7
g3
NtRp583
(dp584
g10
S'auto_20668'
p585
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p586
(dp587
g16
(lp588
sbsg21
Nsg22
g1
(g23
g3
NtRp589
(dp590
g26
(lp591
g1
(g7
g3
NtRp592
(dp593
g10
S'auto_20667'
p594
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p595
(dp596
g16
(lp597
(g18
I216
g19
S'self.L = numpy.array([abs(W).sum(),(W ** 2).sum()])'
tp598
asbsg21
Nsg22
g1
(g23
g3
NtRp599
(dp600
g26
(lp601
g216
asg13
(itheano.gof.utils
scratchpad
p602
(dp603
bsg116
(lp604
g592
asg118
g399
sbsg76
g1
(g77
g3
NtRp605
(dp606
g80
(I00
I00
tp607
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p608
(dp609
bsg116
(lp610
g583
asg118
g1
(g417
g3
NtRp611
(dp612
g420
g83
sg82
g83
sg122
g123
sg178
g180
sg421
Nsbsbsg76
g1
(g77
g3
NtRp613
(dp614
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p615
(dp616
bsg116
(lp617
g573
asg118
g427
sbsg76
g1
(g77
g3
NtRp618
(dp619
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p620
(dp621
bsg116
(lp622
g563
asg118
g174
sbsg76
g1
(g77
g3
NtRp623
(dp624
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp625
(dp626
g10
S'auto_20685'
p627
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p628
(dp629
g16
(lp630
(g307
I46
g308
S'self.cost += sum(self.L_reg * layer.L)'
tp631
asbsg21
Nsg22
g1
(g23
g3
NtRp632
(dp633
g26
(lp634
g1
(g323
g3
NtRp635
(dp636
g10
S'auto_20681'
p637
sg12
Nsg13
(itheano.gof.utils
scratchpad
p638
(dp639
g329
Nsbsg21
Nsg76
g1
(g77
g3
NtRp640
(dp641
g80
(tsg82
S'float64'
p642
sg84
g86
sg87
I00
sg21
Nsbsg335
g104
(g105
(I0
tS'b'
tRp643
(I1
(tg86
I00
S'-C\x1c\xeb\xe26\x1a?'
tbsbag1
(g7
g3
NtRp644
(dp645
g10
S'auto_20675'
p646
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p647
(dp648
g16
(lp649
sbsg21
Nsg22
g1
(g23
g3
NtRp650
(dp651
g26
(lp652
g1
(g7
g3
NtRp653
(dp654
g10
S'auto_20674'
p655
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p656
(dp657
g16
(lp658
(g18
I216
g19
S'self.L = numpy.array([abs(W).sum(),(W ** 2).sum()])'
tp659
asbsg21
Nsg22
g1
(g23
g3
NtRp660
(dp661
g26
(lp662
g216
ag1
(g7
g3
NtRp663
(dp664
g10
S'auto_20673'
p665
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p666
(dp667
bsg21
Nsg22
g1
(g23
g3
NtRp668
(dp669
g26
(lp670
g492
asg13
(itheano.gof.utils
scratchpad
p671
(dp672
bsg116
(lp673
g663
asg118
g1
(g154
g3
NtRp674
(dp675
g157
(lp676
sg159
(lp677
sg161
(lp678
I0
aI1
asg163
(tsg164
I00
sg165
(S'x'
S'x'
tp679
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp680
(dp681
g80
(I01
I01
tp682
sg82
g499
sg84
g334
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p683
(dp684
bsg116
(lp685
g653
asg118
g516
sbsg76
g1
(g77
g3
NtRp686
(dp687
g80
(I00
I00
tp688
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p689
(dp690
bsg116
(lp691
g644
asg118
g1
(g417
g3
NtRp692
(dp693
g420
g83
sg82
g83
sg122
g123
sg178
g180
sg421
Nsbsbsg76
g1
(g77
g3
NtRp694
(dp695
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p696
(dp697
bsg116
(lp698
g625
asg118
g427
sbsg76
g1
(g77
g3
NtRp699
(dp700
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p701
(dp702
bsg116
(lp703
g553
asg118
g174
sbsg76
g1
(g77
g3
NtRp704
(dp705
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p706
(dp707
bsg116
(lp708
g301
asg118
g174
sbsg76
g1
(g77
g3
NtRp709
(dp710
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp711
(dp712
g10
S'auto_20729'
p713
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p714
(dp715
g16
(lp716
(g296
I192
g19
S"self.cost += -T.mean(T.log(p_y_given_x)[T.arange(self.output_variable.shape[0]), self.output_variable.astype('int32')])"
tp717
asbsg21
Nsg22
g1
(g23
g3
NtRp718
(dp719
g26
(lp720
g1
(g7
g3
NtRp721
(dp722
g10
S'auto_20726'
p723
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p724
(dp725
g16
(lp726
(g296
I192
g19
S"self.cost += -T.mean(T.log(p_y_given_x)[T.arange(self.output_variable.shape[0]), self.output_variable.astype('int32')])"
tp727
asbsg21
Nsg22
g1
(g23
g3
NtRp728
(dp729
g26
(lp730
g1
(g7
g3
NtRp731
(dp732
g10
S'auto_20716'
p733
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p734
(dp735
g16
(lp736
sbsg21
Nsg22
g1
(g23
g3
NtRp737
(dp738
g26
(lp739
g1
(g7
g3
NtRp740
(dp741
g10
S'auto_20715'
p742
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p743
(dp744
g16
(lp745
(g296
I192
g19
S"self.cost += -T.mean(T.log(p_y_given_x)[T.arange(self.output_variable.shape[0]), self.output_variable.astype('int32')])"
tp746
asbsg21
Nsg22
g1
(g23
g3
NtRp747
(dp748
g26
(lp749
g1
(g7
g3
NtRp750
(dp751
g10
S'auto_20705'
p752
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p753
(dp754
g16
(lp755
(g296
I192
g19
S"self.cost += -T.mean(T.log(p_y_given_x)[T.arange(self.output_variable.shape[0]), self.output_variable.astype('int32')])"
tp756
asbsg21
Nsg22
g1
(g23
g3
NtRp757
(dp758
g26
(lp759
g1
(g7
g3
NtRp760
(dp761
g10
S'auto_20699'
p762
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p763
(dp764
g16
(lp765
(g296
I189
g19
S'p_y_given_x = T.nnet.softmax(self.output_layer.output)'
tp766
asbsg21
Nsg22
g1
(g23
g3
NtRp767
(dp768
g26
(lp769
g8
asg13
(itheano.gof.utils
scratchpad
p770
(dp771
bsg116
(lp772
g760
asg118
g1
(ctheano.tensor.nnet.nnet
Softmax
p773
g3
NtRp774
(dp775
g122
g123
sbsbsg76
g276
sbasg13
(itheano.gof.utils
scratchpad
p776
(dp777
bsg116
(lp778
g750
asg118
g1
(g173
g3
NtRp779
(dp780
g176
g177
sg178
g1
(ctheano.scalar.basic
Log
p781
g3
NtRp782
(dp783
g182
g206
sg122
g123
sg21
S'log'
p784
sbsg21
S'Elemwise{log,no_inplace}'
p785
sg122
g123
sg186
(dp786
sg188
(g784
I1
I1
tp787
sg190
(dp788
sg192
I00
sg193
S"base e logarithm of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p789
sbsbsg76
g1
(g77
g3
NtRp790
(dp791
g80
(I00
I00
tp792
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp793
(dp794
g10
S'auto_20711'
p795
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p796
(dp797
g16
(lp798
(g296
I192
g19
S"self.cost += -T.mean(T.log(p_y_given_x)[T.arange(self.output_variable.shape[0]), self.output_variable.astype('int32')])"
tp799
asbsg21
Nsg22
g1
(g23
g3
NtRp800
(dp801
g26
(lp802
g324
ag1
(g7
g3
NtRp803
(dp804
g10
S'auto_20708'
p805
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p806
(dp807
g16
(lp808
(g296
I192
g19
S"self.cost += -T.mean(T.log(p_y_given_x)[T.arange(self.output_variable.shape[0]), self.output_variable.astype('int32')])"
tp809
asbsg21
Nsg22
g1
(g23
g3
NtRp810
(dp811
g26
(lp812
g1
(g7
g3
NtRp813
(dp814
g10
S'auto_20706'
p815
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p816
(dp817
g16
(lp818
(S'/Library/Python/2.7/site-packages/theano/compile/ops.py'
p819
I239
S'make_node'
p820
S'return gof.Apply(self, [x], [theano.tensor.lvector()])'
tp821
asbsg21
Nsg22
g1
(g23
g3
NtRp822
(dp823
g26
(lp824
g1
(g7
g3
NtRp825
(dp826
g10
S'auto_20610'
p827
sg12
Nsg13
(itheano.gof.utils
scratchpad
p828
(dp829
g16
(lp830
(g74
I22
g19
S"self.output_variable = T.vector('y')"
tp831
asbsg21
S'y'
sg22
Nsg76
g1
(g77
g3
NtRp832
(dp833
g80
(I00
tp834
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p835
(dp836
bsg116
(lp837
g813
asg118
g1
(ctheano.compile.ops
Shape
p838
g3
NtRp839
(dp840
g122
g123
sbsbsg76
g1
(g77
g3
NtRp841
(dp842
g80
(I00
tp843
sg82
S'int64'
p844
sg84
g85
(S'i8'
I0
I1
tRp845
(I3
S'<'
NNNI-1
I-1
I0
tbsg87
I00
sg21
Nsbsbag1
(ctheano.scalar.basic
ScalarConstant
p846
g3
NtRp847
(dp848
g10
S'auto_20707'
p849
sg12
Nsg13
(itheano.gof.utils
scratchpad
p850
(dp851
bsg21
Nsg76
g1
(ctheano.scalar.basic
Scalar
p852
g3
NtRp853
(dp854
g82
g844
sbsg335
cnumpy.core.multiarray
scalar
p855
(g845
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp856
sbasg13
(itheano.gof.utils
scratchpad
p857
(dp858
bsg116
(lp859
g803
asg118
g1
(ctheano.tensor.subtensor
Subtensor
p860
g3
NtRp861
(dp862
S'idx_list'
p863
(g853
tp864
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp865
(dp866
g80
(tsg82
g844
sg84
g845
sg87
I00
sg21
Nsbsbag1
(g323
g3
NtRp867
(dp868
g10
S'auto_139'
p869
sg12
Nsg13
(itheano.gof.utils
scratchpad
p870
(dp871
g329
Nsbsg21
Nsg330
I01
sg76
g1
(g77
g3
NtRp872
(dp873
g80
(tsg82
S'int8'
p874
sg84
g334
sg87
I00
sg21
Nsbsg335
g104
(g105
(I0
tS'b'
tRp875
(I1
(tg334
I00
S'\x01'
tbsbasg13
(itheano.gof.utils
scratchpad
p876
(dp877
bsg116
(lp878
g793
asg118
g1
(ctheano.tensor.basic
ARange
p879
g3
NtRp880
(dp881
g82
S'int64'
p882
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp883
(dp884
g80
(I00
tp885
sg82
g882
sg84
g845
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp886
(dp887
g10
S'auto_20714'
p888
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p889
(dp890
g16
(lp891
(g296
I192
g19
S"self.cost += -T.mean(T.log(p_y_given_x)[T.arange(self.output_variable.shape[0]), self.output_variable.astype('int32')])"
tp892
asbsg21
Nsg22
g1
(g23
g3
NtRp893
(dp894
g26
(lp895
g825
asg13
(itheano.gof.utils
scratchpad
p896
(dp897
bsg116
(lp898
g886
asg118
g1
(g173
g3
NtRp899
(dp900
g176
S'tensor.basic'
p901
sg21
Nsg178
g1
(ctheano.scalar.basic
Cast
p902
g3
NtRp903
(dp904
g182
g1
(ctheano.scalar.basic
specific_out
p905
g3
NtRp906
(dp907
S'spec'
p908
(g1
(g852
g3
NtRp909
(dp910
g82
S'int32'
p911
sbtp912
sbsg122
g123
sS'o_type'
p913
g909
sg21
S'convert_to_int32'
p914
sS'ctor'
p915
cnumpy
int32
p916
sbsg186
(dp917
sg188
Nsg190
(dp918
sS'__oplist_tags'
p919
(lp920
S'casting'
p921
asg192
I00
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp922
(dp923
g80
(I00
tp924
sg82
g911
sg84
g85
(S'i4'
I0
I1
tRp925
(I3
S'<'
NNNI-1
I-1
I0
tbsg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p926
(dp927
bsg116
(lp928
g740
asg118
g1
(ctheano.tensor.subtensor
AdvancedSubtensor
p929
g3
NtRp930
(dp931
g122
g123
sbsbsg76
g1
(g77
g3
NtRp932
(dp933
g80
(I00
tp934
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p935
(dp936
bsg116
(lp937
g731
asg118
g1
(g417
g3
NtRp938
(dp939
g420
g83
sg82
g83
sg122
g123
sg178
g180
sg421
Nsbsbsg76
g1
(g77
g3
NtRp940
(dp941
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp942
(dp943
g10
S'auto_20722'
p944
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p945
(dp946
g16
(lp947
sbsg21
Nsg22
g1
(g23
g3
NtRp948
(dp949
g26
(lp950
g1
(g7
g3
NtRp951
(dp952
g10
S'auto_20720'
p953
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p954
(dp955
g16
(lp956
(g296
I192
g19
S"self.cost += -T.mean(T.log(p_y_given_x)[T.arange(self.output_variable.shape[0]), self.output_variable.astype('int32')])"
tp957
asbsg21
Nsg22
g1
(g23
g3
NtRp958
(dp959
g26
(lp960
g1
(g7
g3
NtRp961
(dp962
g10
S'auto_20717'
p963
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p964
(dp965
g16
(lp966
(g819
I239
g820
S'return gof.Apply(self, [x], [theano.tensor.lvector()])'
tp967
asbsg21
Nsg22
g1
(g23
g3
NtRp968
(dp969
g26
(lp970
g740
asg13
(itheano.gof.utils
scratchpad
p971
(dp972
bsg116
(lp973
g961
asg118
g839
sbsg76
g841
sbasg13
(itheano.gof.utils
scratchpad
p974
(dp975
bsg116
(lp976
g951
asg118
g1
(g173
g3
NtRp977
(dp978
g176
g901
sg21
Nsg178
g1
(g902
g3
NtRp979
(dp980
g182
g1
(g905
g3
NtRp981
(dp982
g908
(g1
(g852
g3
NtRp983
(dp984
g82
g83
sbtp985
sbsg122
g123
sg913
g983
sg21
S'convert_to_float64'
p986
sg915
cnumpy
float64
p987
sbsg186
(dp988
sg188
Nsg190
(dp989
sg919
(lp990
g921
asg192
I00
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp991
(dp992
g80
(I00
tp993
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g846
g3
NtRp994
(dp995
g10
S'auto_20721'
p996
sg12
Nsg13
(itheano.gof.utils
scratchpad
p997
(dp998
bsg21
Nsg76
g853
sg335
g855
(g845
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp999
sbasg13
(itheano.gof.utils
scratchpad
p1000
(dp1001
bsg116
(lp1002
g942
asg118
g1
(g860
g3
NtRp1003
(dp1004
g863
(g853
tp1005
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp1006
(dp1007
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p1008
(dp1009
bsg116
(lp1010
g721
asg118
g1
(g173
g3
NtRp1011
(dp1012
g176
g177
sg178
g1
(ctheano.scalar.basic
TrueDiv
p1013
g3
NtRp1014
(dp1015
g182
g183
sg122
g123
sg21
S'true_div'
p1016
sbsg21
S'Elemwise{true_div,no_inplace}'
p1017
sg122
g123
sg186
(dp1018
sg188
(S'true_divide'
p1019
I2
I1
tp1020
sg190
(dp1021
sg192
I00
sg193
S"elementwise [true] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1022
sbsbsg76
g1
(g77
g3
NtRp1023
(dp1024
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p1025
(dp1026
bsg116
(lp1027
g711
asg118
g1
(g173
g3
NtRp1028
(dp1029
g176
g177
sg178
g1
(ctheano.scalar.basic
Neg
p1030
g3
NtRp1031
(dp1032
g182
g404
sg122
g123
sg21
S'neg'
p1033
sbsg21
S'Elemwise{neg,no_inplace}'
p1034
sg122
g123
sg186
(dp1035
sg188
(S'negative'
p1036
I1
I1
tp1037
sg190
(dp1038
sg192
I00
sg193
S"-a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1039
sbsbsg76
g1
(g77
g3
NtRp1040
(dp1041
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p1042
(dp1043
bsg116
(lp1044
g290
asg118
g174
sbsg76
g1
(g77
g3
NtRp1045
(dp1046
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
NsbsbsS'params'
p1047
(lp1048
g89
ag136
ag216
ag246
asS'output'
p1049
g1
(g7
g3
NtRp1050
(dp1051
g10
S'auto_20702'
p1052
sg12
I1
sg13
(itheano.gof.utils
scratchpad
p1053
(dp1054
g16
(lp1055
sbsg21
S'argmax'
p1056
sg22
g1
(g23
g3
NtRp1057
(dp1058
g26
(lp1059
g760
ag867
asg13
(itheano.gof.utils
scratchpad
p1060
(dp1061
bsg116
(lp1062
g1
(g7
g3
NtRp1063
(dp1064
g10
S'auto_20701'
p1065
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p1066
(dp1067
g16
(lp1068
sbsg21
S'max'
p1069
sg22
g1057
sg76
g1
(g77
g3
NtRp1070
(dp1071
g80
(I00
tp1072
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1050
asg118
g1
(ctheano.tensor.basic
MaxAndArgmax
p1073
g3
NtRp1074
(dp1075
g122
g123
sbsbsg76
g1
(g77
g3
NtRp1076
(dp1077
g80
(I00
tp1078
sg82
g844
sg84
g845
sg87
I00
sg21
NsbsbsS'output_variable'
p1079
g825
sS'score'
p1080
g1
(g7
g3
NtRp1081
(dp1082
g10
S'auto_20748'
p1083
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p1084
(dp1085
g16
(lp1086
(g296
I193
g19
S'self.score = T.mean(T.eq(self.output, self.output_variable))'
tp1087
asbsg21
Nsg22
g1
(g23
g3
NtRp1088
(dp1089
g26
(lp1090
g1
(g7
g3
NtRp1091
(dp1092
g10
S'auto_20738'
p1093
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p1094
(dp1095
g16
(lp1096
sbsg21
Nsg22
g1
(g23
g3
NtRp1097
(dp1098
g26
(lp1099
g1
(g7
g3
NtRp1100
(dp1101
g10
S'auto_20737'
p1102
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p1103
(dp1104
g16
(lp1105
(g296
I193
g19
S'self.score = T.mean(T.eq(self.output, self.output_variable))'
tp1106
asbsg21
Nsg22
g1
(g23
g3
NtRp1107
(dp1108
g26
(lp1109
g1050
ag825
asg13
(itheano.gof.utils
scratchpad
p1110
(dp1111
bsg116
(lp1112
g1100
asg118
g1
(g173
g3
NtRp1113
(dp1114
g176
g177
sg178
g1
(ctheano.scalar.basic
EQ
p1115
g3
NtRp1116
(dp1117
g122
g123
sg21
Nsbsg21
S'Elemwise{eq,no_inplace}'
p1118
sg122
g123
sg186
(dp1119
sg188
(S'equal'
p1120
I2
I1
tp1121
sg190
(dp1122
sg192
I00
sg193
S"a == b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1123
sbsbsg76
g1
(g77
g3
NtRp1124
(dp1125
g80
(I00
tp1126
sg82
S'int8'
p1127
sg84
g334
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p1128
(dp1129
bsg116
(lp1130
g1091
asg118
g1
(g417
g3
NtRp1131
(dp1132
g420
g844
sg82
g844
sg122
g123
sg178
g180
sg421
Nsbsbsg76
g1
(g77
g3
NtRp1133
(dp1134
g80
(tsg82
g844
sg84
g845
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp1135
(dp1136
g10
S'auto_20744'
p1137
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p1138
(dp1139
g16
(lp1140
sbsg21
Nsg22
g1
(g23
g3
NtRp1141
(dp1142
g26
(lp1143
g1
(g7
g3
NtRp1144
(dp1145
g10
S'auto_20742'
p1146
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p1147
(dp1148
g16
(lp1149
(g296
I193
g19
S'self.score = T.mean(T.eq(self.output, self.output_variable))'
tp1150
asbsg21
Nsg22
g1
(g23
g3
NtRp1151
(dp1152
g26
(lp1153
g1
(g7
g3
NtRp1154
(dp1155
g10
S'auto_20739'
p1156
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p1157
(dp1158
g16
(lp1159
(g819
I239
g820
S'return gof.Apply(self, [x], [theano.tensor.lvector()])'
tp1160
asbsg21
Nsg22
g1
(g23
g3
NtRp1161
(dp1162
g26
(lp1163
g1100
asg13
(itheano.gof.utils
scratchpad
p1164
(dp1165
bsg116
(lp1166
g1154
asg118
g839
sbsg76
g841
sbasg13
(itheano.gof.utils
scratchpad
p1167
(dp1168
bsg116
(lp1169
g1144
asg118
g977
sbsg76
g1
(g77
g3
NtRp1170
(dp1171
g80
(I00
tp1172
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g846
g3
NtRp1173
(dp1174
g10
S'auto_20743'
p1175
sg12
Nsg13
(itheano.gof.utils
scratchpad
p1176
(dp1177
bsg21
Nsg76
g853
sg335
g855
(g845
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp1178
sbasg13
(itheano.gof.utils
scratchpad
p1179
(dp1180
bsg116
(lp1181
g1135
asg118
g1
(g860
g3
NtRp1182
(dp1183
g863
(g853
tp1184
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp1185
(dp1186
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p1187
(dp1188
bsg116
(lp1189
g1081
asg118
g1011
sbsg76
g1
(g77
g3
NtRp1190
(dp1191
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
NsbsbsS'input_variable'
p1192
g68
sS'output_layer'
p1193
g1
(cdeep_learning
Layer
p1194
g3
NtRp1195
(dp1196
g1049
g8
sg1047
(lp1197
g216
ag246
asS'L'
g104
(g105
(I0
tS'b'
tRp1198
(I1
(I2
tg85
(S'O8'
I0
I1
tRp1199
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp1200
g583
ag644
atbsbsb.