ccopy_reg
_reconstructor
p1
(cdeep_learning
MLP
p2
c__builtin__
object
p3
NtRp4
(dp5
S'layer_output'
p6
g1
(ctheano.tensor.var
TensorVariable
p7
g3
NtRp8
(dp9
S'auto_name'
p10
S'auto_12222'
p11
sS'index'
p12
I0
sS'tag'
p13
(itheano.gof.utils
scratchpad
p14
(dp15
S'trace'
p16
(lp17
(S'deep_learning.py'
p18
I222
S'__init__'
p19
S'self.output = activation(T.dot(input, W) + b)'
tp20
asbsS'name'
p21
NsS'owner'
p22
g1
(ctheano.gof.graph
Apply
p23
g3
NtRp24
(dp25
S'inputs'
p26
(lp27
g1
(g7
g3
NtRp28
(dp29
g10
S'auto_12217'
p30
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p31
(dp32
g16
(lp33
(g18
I222
g19
S'self.output = activation(T.dot(input, W) + b)'
tp34
asbsg21
Nsg22
g1
(g23
g3
NtRp35
(dp36
g26
(lp37
g1
(g7
g3
NtRp38
(dp39
g10
S'auto_12179'
p40
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p41
(dp42
g16
(lp43
(g18
I222
g19
S'self.output = activation(T.dot(input, W) + b)'
tp44
asbsg21
Nsg22
g1
(g23
g3
NtRp45
(dp46
g26
(lp47
g1
(g7
g3
NtRp48
(dp49
g10
S'auto_12176'
p50
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p51
(dp52
g16
(lp53
(g18
I222
g19
S'self.output = activation(T.dot(input, W) + b)'
tp54
asbsg21
Nsg22
g1
(g23
g3
NtRp55
(dp56
g26
(lp57
g1
(g7
g3
NtRp58
(dp59
g10
S'auto_12171'
p60
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p61
(dp62
g16
(lp63
(g18
I222
g19
S'self.output = activation(T.dot(input, W) + b)'
tp64
asbsg21
Nsg22
g1
(g23
g3
NtRp65
(dp66
g26
(lp67
g1
(g7
g3
NtRp68
(dp69
g10
S'auto_12167'
p70
sg12
Nsg13
(itheano.gof.utils
scratchpad
p71
(dp72
g16
(lp73
(S'deep_learning.py'
p74
I21
g19
S"self.input_variable = T.matrix('x')"
tp75
asbsg21
S'x'
sg22
NsS'type'
p76
g1
(ctheano.tensor.type
TensorType
p77
g3
NtRp78
(dp79
S'broadcastable'
p80
(I00
I00
tp81
sS'dtype'
p82
S'float64'
p83
sS'numpy_dtype'
p84
cnumpy
dtype
p85
(S'f8'
I0
I1
tRp86
(I3
S'<'
NNNI-1
I-1
I0
tbsS'sparse_grad'
p87
I00
sg21
Nsbsbag1
(ctheano.tensor.sharedvar
TensorSharedVariable
p88
g3
NtRp89
(dp90
g10
S'auto_12169'
p91
sg12
Nsg13
(itheano.gof.utils
scratchpad
p92
(dp93
g16
(lp94
(S'/Library/Python/2.7/site-packages/theano/compile/sharedvalue.py'
p95
I209
S'shared'
p96
S'utils.add_tag_trace(var)'
tp97
asbsS'container'
p98
g1
(ctheano.gof.link
Container
p99
g3
NtRp100
(dp101
g21
S'W'
sS'storage'
p102
(lp103
cnumpy.core.multiarray
_reconstruct
p104
(cnumpy
ndarray
p105
(I0
tS'b'
tRp106
(I1
(I15
I10
tg86
I00
S'\xd1\x87\xf7e\xc0\x1b\xc5\xbf\xc4\x06\x96\xdf\xd0\xdb\xb0?\x9cA\x85\xac\xf8\xb2\xcf\xbf\xa0\x84\xd5@\xcf\xa0\xc8?|\xb0?\xb7\x17\xf3\xc4?\xe5x\x16\xf9\xc8\x0f\xb8\xbf5^\x04{5\xa9\xbb\xbf<\x1f\xbc\x1d\x9a\x1c\xc1?\nc\xf3\x8d\xb0\xce\xdc?:\xc6\xc9\x99\x94\x87\xd1?\xf6`\x96\x841\x00\xbd\xbf\xdfKb\xb6tl\x87?\xbe\x85\x99\xa0\xd0\xfb\xcb?\xe78\xea\xd0~6\xc9?\xcc\xd6\x0f&#\\\xb9\xbf\xf9cp\'\xfe\xfa\xae?\x9do\x94z1\xa7\xa3?\x02\xc1\xeb\xd3\xe3|\xdd\xbf\xcaB\x85\xef\x8a\xaa\xd0?|g\xfd\xd0\xf1l\xd6?\x07\xd0]\x80\xec\xc0\xbe\xbf\\f\x17\xfafr\xc2?\xd8,\x91\xc4G\xdd\xd1\xbfG\xb6\x84\xe6\xe22\xbd\xbf\xf0\x06\x90D\x1b\xf9\xdb?\xd2\xb3b&\xfe\x98\xbe?#\x85\x83b\xea\x15\xb2\xbf\xefi\x93HHa\xcf?\x88\x12v\xdfE\xf2\xc5\xbf\n\x07\x83\xc4R-\xb0?\x08IM~\xc1\xd7\xdc?\xb7\x12\no\xe3\x10\x9b\xbf\xc3\xd2\x95?\xaa\x1f\xd6?\xb4%.~\xb5\x18\xd8\xbf1[l\x99\xc5\xa6\xcb?\x8c#\x8a\x8f\xccq\xce?\xab\x07>\xa8\xd5E\xc1\xbfp>\xde}\x86z\xd3?\xdc\xf8^\xd0\xf4\xf3\x9d\xbfo\xdc\x9b\xd5\xf1\xe5\xd4?\xe6\xfb\x9eWL\xb1\xd4\xbf\x19\x8b\xf2\xaf\xd0\x1b\xd1\xbf\x8dWP\xd2\x08\x13\xd8\xbf\x8e\x14\xc8\xbao\xd2\xc0?"\x1e\xe9\x7f\x11v\xbc?|\x0c\xfa\x02#\xf5\xb2?-\xa6\xd3\x04K`\xd3\xbf\x04\xfc\xa3[\x7f \xa6\xbf\xc3\xc2\xd1\x04\x1c\x83\xc1\xbf\xcd\x86\x02\xab\x81\xc8\xaf\xbf\x0e\x82\xda\xd3\x86\xd0\xd2\xbfZZ\x1f\xf3\x9c\x99\xa6?WB\x19\xb1\xb7f\xb0\xbf\x0e\xbd\xb7I\xfb\x96\xe0\xbf\x85F\xd2\xdc\xd97W\xbfB\xac\xc2+\xc84\xdf?\x98hr\'KA\xd4?|eiD>z\xd6?\x02\xab\rJ\x8b8\xdb?\xfd\x0f:p\x8d\r\xce?\r\xae[O\x19\x01\xbd\xbf\x07\x12?)\x0e\x8a\xb7?\x9f\xbe\x0b\xe5T\xeb\xb7\xbf\x11)\x96\x83\xe7j\xd5\xbfk@#\xe28\xd1\xc6\xbf\xa3\'\x03\t\xb5\xf2\xd5\xbf\x12\x05=\xc1%\xa9\xa0?\xd9\xc4)\xf5.\\\xd4?\x9f0K\xb9\t\xc6\xd6\xbf\x91B\x7fx\xcb\xb7\xda\xbfp\x0f-\x17\x00\xc9\xcb?3AA\x92\xad\x81\xc3?\xf9\xe6\xcc\t\x9f\xd5\xcc?\x03{\xbe\xc9\x18\xbc\xd5\xbf\x12\xaeq_\x80\xb6\xc0\xbfmZz\xfa\x07\xcf\xd3?\xd1qk|\x04Q\xa5\xbf\xa8\x1c\x18V\x03\xb3\xb0?\xbd#\x9e\xdbE\xdf\xdc\xbfP\xc3(\x1b\x87\x1d\xc8\xbf\x0eb\x0c\x8d\xdc\x9e\xb8\xbf\x9e(Q\x9c7u\xd9?\x1c\xd2U\x9f\x8c\xaf\xf8?\xe7\xd4|\xa0 \xda\xd0?$~\xfb\xd5\xb3\x86\xe3?\x90s\xf2g\xe3\xaa\xe1\xbf\xc3\xd4\xc0\xd4\xc5o\xd8?\xf6jJK\x1ea\xdb?uk\x19\x1d\x1c\n\xc4?H*\xa4g$\x95\xa0\xbfP&W\x97\x91\xd6\xcd\xbf\xd0Y\x8a\xf0I\xe2\x8c\xbf\xc8|M\xa9\\\xb5\x94\xbf\x88\xcc=V\xbbB\xd7?SDq\xe8W\xcc\xbf\xbf#\xceZk\xcb"\xb9?6=m\xa6\xa3\xa9\xb0?\x9a\xb0-\xcb\x01\xc1\xc8?\xd5\xe3\x1e\x9a1\x13\xdc\xbf\xef`\xe30\x1a\xad\xb9?\x0e\x86\xd3\xb5\x97U\xd2?U\x14Y\xa5\xabL\xbc?\xdf\x17\x97\x10L\xdb\xb0?tw\xfe\xd9?U\x8d?\x0f~S\x1dXS\xd2?\xf4P\xab\x0b\xf6\x92\xd0\xbfT\xe7%{Os\xdf\xbf_\x9f\x0cwd\x16\x9e?\xe3\x05\xa7A\x11\x00\xda\xbf!7H\xc6?\x14\xdb?\x10\x92a\xff\xfa\x84\xa5\xbf;\x95\xa0tf\xfd\xd4\xbf\x1eQ]kh\x9c\xc6\xbf\xdc+\xab\x88\xd1\x1b\xd5?[/\x99RHL\xd2?\x03\xab\x1b\xf3\x8e\xa3\xc0\xbf\xbc\xf1)\xf4\xd0>\xa1\xbf\xbc\x83s\r\xdc\xc3\xdc\xbf\x04&\xde\x82\xb0\xa0\xd9?[\xe6+&\xcc(\xbd?*\xa2-oho\xd6?\xb2\x86\x03\xde\xb0\x82\xd4?yS9Ls1\xb2?\xb2\xb4\xd2\xf9\xf1v\x84?W\xa4\x07k\xd0\xc4\xd3\xbf{\x88\xf0\x9f\xa5\x0c\xca\xbf\x98|+UC\xd4\xa9\xbf\x0c\xb1\x1c]2\xb6Y\xbf\xa9Z\xb7KJ8\xd9\xbf\xbf?m%b\x8c\xe0\xbf\xdf\xce?\x9b\xa8\x15\xc3\xbf\xdep>EZX\xa9?\xdfH\x8eM\xfc\x94\xc9?\xcf\x8a%Hr\x18\xcd\xbfv\xf2 \xbe\xef.\xd8\xbf\x17!\xa2\xf2\xdc\xb6\xd3\xbf-.K3\xc9>\xde?>\x08\xe6\xc2}\xb9\xd5\xbfw\xf7l\x9d\x94\xf5\xc6\xbf\x89\xa1\xe8\xecA\x14\xaa?\x88\xd0m\x13\x16[\xdd\xbf\xa6\xfe\xbdCd\x1a\xd6?\x8b~I\x86\xebf\xd2?\xdd \xd9C0L\xa0?a\xba\xd2\xc7\x1c\x01\xe0\xbf\x85\xb0%\x16\xa2>\xbf\xbf\x9e\x7fA\x0bEj\xc9?\xb6^BE\x85\x13\xd9\xbf)t\x0b;\xc8\xe8\xa0?)\x88\xa7\xf7\xee\x16\xcc\xbf'
tbasS'strict'
p107
I00
sS'readonly'
p108
I00
sg76
g1
(g77
g3
NtRp109
(dp110
g80
(I00
I00
tp111
sg82
S'float64'
p112
sg84
g86
sg87
I00
sg21
NsbsS'allow_downcast'
p113
Nsbsg21
S'W'
sg22
Nsg76
g109
sbasg13
(itheano.gof.utils
scratchpad
p114
(dp115
bsS'outputs'
p116
(lp117
g58
asS'op'
p118
g1
(ctheano.tensor.basic
Dot
p119
g3
NtRp120
(dp121
S'_op_use_c_code'
p122
S'/usr/bin/clang++'
p123
sbsbsg76
g1
(g77
g3
NtRp124
(dp125
g80
(I00
I00
tp126
sg82
S'float64'
p127
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp128
(dp129
g10
S'auto_12175'
p130
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p131
(dp132
bsg21
Nsg22
g1
(g23
g3
NtRp133
(dp134
g26
(lp135
g1
(g88
g3
NtRp136
(dp137
g10
S'auto_12170'
p138
sg12
Nsg13
(itheano.gof.utils
scratchpad
p139
(dp140
g16
(lp141
(g95
I209
g96
S'utils.add_tag_trace(var)'
tp142
asbsg98
g1
(g99
g3
NtRp143
(dp144
g21
S'b'
sg102
(lp145
g104
(g105
(I0
tS'b'
tRp146
(I1
(I10
tg86
I00
S'L\x1c\x82a\x83|\xc1?\x9d\xf2\xa1\x1e\xbb@\xab\xbf9w{}E3\xc9\xbf\xf5\xf1\x848\xf3\x80\xb5\xbf\xaf\x0b\x81\x8f\xb2\x03\xbc\xbf\x0b"\xcf\xbdxk\xc0?\x1b\xd1\xd3\xca5\xa4\xbc?r>\x9c\x0b\xd0\xe3\xc4\xbf\xa1\x8b<\xf8\x10+\x8b?v\r\xef|\x898\xb7\xbf'
tbasg107
I00
sg108
I00
sg76
g1
(g77
g3
NtRp147
(dp148
g80
(I00
tp149
sg82
S'float64'
p150
sg84
g86
sg87
I00
sg21
Nsbsg113
Nsbsg21
S'b'
sg22
Nsg76
g147
sbasg13
(itheano.gof.utils
scratchpad
p151
(dp152
bsg116
(lp153
g128
asg118
g1
(ctheano.tensor.elemwise
DimShuffle
p154
g3
NtRp155
(dp156
S'drop'
p157
(lp158
sS'shuffle'
p159
(lp160
I0
asS'augment'
p161
(lp162
I0
asS'input_broadcastable'
p163
g149
sS'inplace'
p164
I00
sS'new_order'
p165
(S'x'
I0
tp166
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp167
(dp168
g80
(I01
I00
tp169
sg82
g150
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p170
(dp171
bsg116
(lp172
g48
asg118
g1
(ctheano.tensor.elemwise
Elemwise
p173
g3
NtRp174
(dp175
S'__module__'
p176
S'tensor'
p177
sS'scalar_op'
p178
g1
(ctheano.scalar.basic
Add
p179
g3
NtRp180
(dp181
S'output_types_preference'
p182
ctheano.scalar.basic
upcast_out
p183
sg122
g123
sg21
S'add'
p184
sbsg21
S'Elemwise{add,no_inplace}'
p185
sg122
g123
sS'destroy_map'
p186
(dp187
sS'nfunc_spec'
p188
(g184
I2
I1
tp189
sS'inplace_pattern'
p190
(dp191
sS'openmp'
p192
I00
sS'__doc__'
p193
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p194
sbsbsg76
g1
(g77
g3
NtRp195
(dp196
g80
(I00
I00
tp197
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p198
(dp199
bsg116
(lp200
g38
asg118
g1
(g173
g3
NtRp201
(dp202
g176
g177
sg178
g1
(ctheano.scalar.basic
Tanh
p203
g3
NtRp204
(dp205
g182
ctheano.scalar.basic
upgrade_to_float
p206
sg122
g123
sg21
S'tanh'
p207
sbsg21
S'Elemwise{tanh,no_inplace}'
p208
sg122
g123
sg186
(dp209
sg188
(g207
I1
I1
tp210
sg190
(dp211
sg192
I00
sg193
S"hyperbolic tangent of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p212
sbsbsg76
g1
(g77
g3
NtRp213
(dp214
g80
(I00
I00
tp215
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g88
g3
NtRp216
(dp217
g10
S'auto_12215'
p218
sg12
Nsg13
(itheano.gof.utils
scratchpad
p219
(dp220
g16
(lp221
(g95
I209
g96
S'utils.add_tag_trace(var)'
tp222
asbsg98
g1
(g99
g3
NtRp223
(dp224
g21
S'W'
sg102
(lp225
g104
(g105
(I0
tS'b'
tRp226
(I1
(I10
I1
tg86
I00
S'\x0eA-\x8b\xf2G\x9b\xbf\xbe\xd9_\x13\xd0\xd4\xb2?\nH\xe7\xa4\xc2\xd7\xe2?o\x01\xd4\x1d\x15\xd2\xa5?|\x8aR\x19e0\xcf?\xcd8\xe4\xc2\x14b\xbd\xbf\x82"\x8e\xbb4Q\xaf? U`\xd8J)\xc7?\xb4\xe8\xbf51F\xa5?x\xba\xed\xe5\x0b\xd3\x90\xbf'
tbasg107
I00
sg108
I00
sg76
g1
(g77
g3
NtRp227
(dp228
g80
(I00
I00
tp229
sg82
S'float64'
p230
sg84
g86
sg87
I00
sg21
Nsbsg113
Nsbsg21
S'W'
sg22
Nsg76
g227
sbasg13
(itheano.gof.utils
scratchpad
p231
(dp232
bsg116
(lp233
g28
asg118
g120
sbsg76
g1
(g77
g3
NtRp234
(dp235
g80
(I00
I00
tp236
sg82
S'float64'
p237
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp238
(dp239
g10
S'auto_12221'
p240
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p241
(dp242
bsg21
Nsg22
g1
(g23
g3
NtRp243
(dp244
g26
(lp245
g1
(g88
g3
NtRp246
(dp247
g10
S'auto_12216'
p248
sg12
Nsg13
(itheano.gof.utils
scratchpad
p249
(dp250
g16
(lp251
(g95
I209
g96
S'utils.add_tag_trace(var)'
tp252
asbsg98
g1
(g99
g3
NtRp253
(dp254
g21
S'b'
sg102
(lp255
g104
(g105
(I0
tS'b'
tRp256
(I1
(I1
tg86
I00
S'\xa8v\xbe\x9f\x1a/\xcd?'
tbasg107
I00
sg108
I00
sg76
g1
(g77
g3
NtRp257
(dp258
g80
(I00
tp259
sg82
S'float64'
p260
sg84
g86
sg87
I00
sg21
Nsbsg113
Nsbsg21
S'b'
sg22
Nsg76
g257
sbasg13
(itheano.gof.utils
scratchpad
p261
(dp262
bsg116
(lp263
g238
asg118
g1
(g154
g3
NtRp264
(dp265
g157
(lp266
sg159
(lp267
I0
asg161
(lp268
I0
asg163
g259
sg164
I00
sg165
(S'x'
I0
tp269
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp270
(dp271
g80
(I01
I00
tp272
sg82
g260
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p273
(dp274
bsg116
(lp275
g8
asg118
g174
sbsg76
g1
(g77
g3
NtRp276
(dp277
g80
(I00
I00
tp278
sg82
g83
sg84
g86
sg87
I00
sg21
NsbsbsS'layer_n_out'
p279
I1
sS'L_reg'
p280
g104
(g105
(I0
tS'b'
tRp281
(I1
(I2
tg86
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00-C\x1c\xeb\xe26\x1a?'
tbsS'learning_rate'
p282
F0.01
sS'rng'
p283
cnumpy.random
__RandomState_ctor
p284
(tRp285
(S'MT19937'
p286
g104
(g105
(I0
tS'b'
tRp287
(I1
(I624
tg85
(S'u4'
I0
I1
tRp288
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'Z\xa6\xb9\x86\x86`\xcc\x14\xc0\xb61\xca\xe8Td\xadp\xfaa\x08\xc5\xed\x9c<\xb0[\x7f\xf1\xfa\xf3::\xab|\x0ea-L\x9c7\xda\xff\xe9\x18dO%\xb9\xfd\xb3R\xe5CM\xaf\xa9\xa3\xc9\x82n\x92=\xfd\x8c\xf6A\xa2%\xd8q4\xb3\xc3\xb7\x92n\xc8\x80\xb6\r\x97_6-H\x19+wo}\xd0\x8b}J\xd4\xf8\xd8\x05\xb9\x10\x8c\x98\xb3e\x89\xe5J\xf9\xe5%z<\x8fYf$?B\xf8\x8aj~\x95\xcc\xe14\x9eME9\xbc\x92\x04Z1H\xc2|\xf7\xb9\xc6N\x80\t\xdc^\xd0.WS\xc7AP\xbe\n\x82\x82-\xa0\xeeB\xfd\xb3\xc6\xc6h\xfc\x80&#v\xc6\x17\xb9\x98\xc6\x1f:\xac\x02o\x93\x9c~!\xc0\x99\xf4\x0fK\\vdy\x9a\xc0E\xd3\xbb\x99\x8f\xf3\xebya\x99bd+\x9a\xb1\xf4\xa0\xd0\xc5\x0f\xf0\x87\x13\xcek\x1c\xf9\xd8R\xd9,\xc54\xbc\xeco\x83\xff\xa0c\xa0\x022\x1d8lF\xd9E\xe2\xc6>\xf4\x81\xbd\xf4\xdfX\xfa\xcb\x17\x81\xe4\x9b\x1d\x96\x8ak\x8a\xa7\xfd\xd2c\x1a\xc8\xcd\x80\x90\xff\x8eM\xddJ]\xffm\x81\x939\xe1\x82DN\xfe\x15\xdb?\xe6L\xd5\xe6\x93\xa9\x7f\x80z4\xe9m\xc1j\xe7\xa1\xe1\xed\x1d`[\xdc\x86\xab\xb1\x83\x0e+\xaa\xbe\xda\xfc\x0ff\xad\x9c\xf4\xfb\x96\xb5\x0f\xf7dg\xc3z=\x15%058\x7f\xceG\\2\x99\xa5\x12V\x02\xb9\xda\xebD\\(\x9eZ\x8d\xb4|\xd4\x8c\x86d\xdb#\xb95*\xf8QhM\x88\xb2\x04\xcb\xc9\xe1\xb6\xbe\xcc\xdb\xbe\x0e\xe6\x89\xe5@\'\xa6Q%d:\xab\x8d\x17|\xabRr\x18\x04\xe9\x81\x0b\xfe\xbe,|\x08*L\x06\xbc\x80\xc3\xc6=\xb89Y\xed\xb5\x9d\xb5-\x96U\xef\xce\x04\x1bW\xc1\xf8\x90\x15I\x96\x97\xe0\xad>:@\x8dL\x16\xe5<\xf4hn\xa3\xd8O\n+\xc4\xf2\'\xb5\x92Y\xd2#QKCLA\x85\x99\x9cq\xdfF\x13G\x06\xf7\xf0H\xd0\x7f\\\xfe4\x9b\xdcG\\\xc1\xcfB\xeae\xbe2Kh\xc7\xa1\xdc\xa7\xc8\xc5\xa2\xec\xc4\xcd\x8a\xa7aa\\q\x8e\xc54\xc8\xb0\x86\xfc\xea\xd7Y\xf9\xeb\x9d\xf4\xa0\xec[%\xf9:o\xf9NE\x11\xa3\xde\x904\xf1\xc6\\\x1cm\x14\xa2(\xedF\xff\xe1\x9f/\xf2\x1fh\xcfl"5\xa4\xe0\xae\xd5\x1a*\xdeR{e\xf3\xc7X\xf6\xe8h\xb7I\xb7p\xa5H\xab\x91X\xab\x07\xa6qN\xf7BQ\xf4\xca\xd6D\x15v\xc5\x9e8\x82\xbb\xd1\xe4\x9f2\xc0\xc6{u|5(\xc5\xd87\x1c>4\x7f\x1daO\xb9\xe1\x9ef\x80\xa1\xd9\x7f\x7f\x93\xc9\xf3N\x82\xeaH\x96u\xe1p\xaaT\xca\xef;\xb9\x83\x8e\x9c\r\n+%\x95\xd9\x1f\x84\xcc\x7f\xf2\x94W\xc4\xee@[k\xc8Z\xa6h\xa4\xe9M\xfc\xa2\x89\xc0\xd79E\x9f\x8e\xb3v\xb9[B\x0e\\\xea\xfbU\xd4\xea\xee\xa5ZG\x84\x8c#\xe13\t\x94\xf7\x94\xa8\xd4\xd1\xb7\nP\xb1we@\x9fD\xac\xf3N\x81\xe3/\'\x8ez\xa2\x16`\x9d\xa6h\x81\\M\xf7\xc5\xb2\x1f\x8aN\xd2\xccgV\x87\x16\xf9}\xaa\xbd\x84\xc5.\n\x96Z\xb4\xac\xc2\x9c\xed;\xe9\x92\x86}\x94\x00\xa6\x96\xba>\x8e*\xf3\xd9\x8f\xd9^\xa9\x93\t\x03\xd8E\x08\xdb\xb1\x80Y\x8d!\xdf\x87\xfbt\x9d\x01\x9d$\x05\xd5\xce.\xedi\xbc\xfe\xf8:\x8dpu\x0b\x10\xbd\xc0\xdf\x89,\xdfA\xf2\x15\x03\xdfF\xe3Nm\xcef\xeaE\xa4(\xcb\xbf?\xf6\xf91\xc7\xb2\x80\xd1\x9e\xab\x0e,\x13\xdaK\x99\xee\x8b#\x11\xd6\x9e\xca\x90P\xa7\xa4\xd9\xee\xc1\xeef\\w\x07\x14\xf9a\x81\xf5\xbeFB\x0e\xa4\xbf(\x1c(\xf0\x996\xab?\xe4\xca\x896"M${\xa5d\xdf\xfe\xd1PE\xd2\x97\xd0\x1e\x8fqy22C\xfeF\x1e;P\x91k\xff$$9\xa7H\xa0\xa9\xffQ\xa2\xa6\xde\xc0\xad\rK\xcf*.+\xe6\xa9\x7f\xeb>cj\x81\xe3\x1ddl\xa4\xdb\x9d\xbc[\xd2\x90\xed-+\xa4\x00\xc4mU\'W\x84\x07\xbe\xdb\xbc\xd8\x18\x17*\xbc\xea\xa5\xb9\xcf\x9e\x87\xab\x84\xa0\xe2t\x1c;\xb91\xae:{u\xcd\x10R\xcb\xf5\xb7\xaf\xd0`\x1d\x14=Q\x17\xfbt"R?\xd3FPB\x9a\xfd0\x8e\xce{(Z\xa5\xc1\xd8\xaf\xd76.0Q.\xafx\xce6Yg\xe78\xe1\x97\x95\xdemAn9#W\x02a#\x10i$\xa4\xb9\xad\xd9\xba\xa8>y\x97\xcaH\xd3\xf3i\xa0\x04\xfaR\x1b\xf61.\x9e^:\xcd\xb8PH\\\xba\xd7\xdd\xc2\xd3e\xd8\xb8|\x13Q\xf6\xaaz\xb1\xc21\xce\x92k\x9eW2\xbdRA\xb7,\xf0\xa0\x0c\xd9\x9fQ\x80\x81\\\x0e\xa3E\x91\x15[\xb0T9\xeeg\xa2\x82e\xe53\xc5b\xe5{z\x0fJB\xfe\xff[\x80E\xcb\x9d`\xcf\xff\xc8\x91\xcdQM`\'[\x92\xdf;\x1f\xb4{\x1a\xa28-\xb8o\x8b#\xcd\xdbrsz\xd2\xd5\x02+\xee\xf7b\xa7w\x1f\xc2\xede\x81\xaf\xb1d\xd7\xff\xbd\x93\xa1Ze\xfd\xc8\xb8\x1bci5{\xa8\xa5\x8d.\xd9\xab.\xd6\x04e4\r\xee\xd4\xe3\xf1~\x15\xef\x9d\x99DNW\x95\x9ah\x81\xe7I\x8e\x10\xd7\xd0i\x9e\x127%f\xb9\xf9|\x89^h\x81r\x81\x05\xe3\xb8b~\x92\'g\xed\xb4}t\xe6\x9d_\xb8\xc5\xdf,\x14\xf0n\x80\x1a\n\xf2\x7f\xfaj\xd6\x8b\xd5\x93\x8b\r-\xf9\xb8\xcc\xd9\x0b\xd1l\x18w\x9d$\xe1\xb8\x18f\xdcQ\xe1\x06Px\xc0\xce\x8f\xde;\xe3\x85\x93\x9b\x08P\xf5V](\x1e\xc5\xf0\xee,M\xfb\x89\xdf(c\x04D\xef\x85\xd5&q\xb6\x84i\\]\xce\xb1\x9f\xc9\x8c\xd1\x95\x95\x97sPKr\x03\x13Q(]\xe5l\x08\xd9I\xa1\xd1\xd2M`A\xc5~\xff\xde\xd2-\xfc\x9fy\x9e\xb2\xac\x14\xc1d#\xab=\xacv\xde\x10\xe0r\xc2\xac\x0b\xcc\xe91\'2\xbb\xb7\xe5\xb8\xafg\x1a$\xdf\xc6Z\xd7\xc8C\x1f\\\xf3\xdf\xfdz\x93d\\6\xbbf\xf8\xdc\x05W\t\x93\xc5\x8e\xfc\x11\xb9\xa1\xe6\xe4\x87\xf3k|;\xcbF\xe4\xd7$\xa3\xb72\xd6S\xaf\xc9\xc2\x19\xeae\x880\xb9\x05*\xf6\xaaF\xa4s\x1b7\xa3^\x0b\xa1N\xe9\xc7\xe1P\xac\x05_\xfa\x96\xe2\xbf\x88\xfb\x88\xf1\xf96H\x8c{\xdb\xa9\xda\xcb\xd1\xaa\xee\xa2o#z\xf1\xcb\xe3\xdb\xdbP\xc8\xe5\x94\x9e\xe7\n\x98\x9a\xfaT\rm\xf0U\xb2\xf2\x1f\xc8\xac\xd4\xac\xcb\x1a\x9b\xbe\xdf\xb8\x9c=$>\xc0\xd2\xf3\xf2\xd8\xd8>|SO\x12\xe1-\xf4\x8f3\xd1\x95U\xd9C\xdb\x85:UPj\x95\xb4@\x81U\xd12\xa3\x84\xa0!\xc3N\xb4\x93\xe2\xe1\xae\x88X*\x10\x1f\x06VH\x96\xc3\xc8\x1bA+\xc3X\x11\xa4\xe9\x90\x80^\xads\xec\x8c\xa5n\xa2\xedK\xdc\xac@\x8a\x10L\xa9\x8f\x96\x06\x86\xb6\xdf\x9e\x9fz\xe4\x07\xd5\xf6X\x1c\x12\x1a\x0c\xc1\x1c\x8e\x82\x13\xf2\xc6\xd7\xe9\xf6\xad\x9c\xbc\x1d\xc2\x85\xe2q\xfeK4\x11N\xe5\x92\xad\x1c9Z\xb5PKOq\x18\xa7\xd1\xce\xec/\xad\xfdv"\xf4\xf4\xa9\xc0-O!\xe3;K\xed\x9eB\xacX\x10~\xae\x8d\xb5\t\xdc2\x9e<r3\x14\x7f\xb5\x0c\x08q\xfdi\xdd\x01<\xe5B\n\xdd\rsF]IZ\x9f\x8d\xdb\x9d\xf2\x93\xe7\x9e\xd6\xf5\x9dr\xac"\xe3\x8f\xe9mWQ\xfb\xa7\x97\x179\xfe\xdf/?\xb2Q\x96\xfc\xda\xa8%\x9a\x96\x00"Sq\xaf=\xdf\x7f\xaf\n\x82\xc2,\x85\xdf\xbb\xae\x9f@:K\x84\xbc\x93\x82\x82\xd25_\xbc\x8dr\xb1y\xdc\xed\x02\xb2"{\x82\xe3$\xc6\r\xb6E\t+sv|\x0e\x1d~\xb5\xc5\x92\xd0\xb3V\xd9\xdc\x95\xeeE9\xaaX \x9en\x18h\xff\xe7-x\x82\xae\x05\x03.\xa9\x81\xadi5\xfa\xbai\xc2\xba\x98i\xdd!\x9f\x86\x0e\r\r_E\x1a\xa3\xa9\xd5\xf0}\xecb6\x82\x04\xd8\xad\xbaq~\x8cv\xf9\xc1\xfbu\xabL\x9e\x068\x95\xefM7\xc0\x90`\xf3\xb7\xc6Rt\xdcB\x1e\x97\xd4X\xbe\x1a\x1d\xde\xa1\x00\x1ch\xadh\x0f\x03?\xb2\xe9\xbd8T\x19)X\xb6\xdd\x06\x93\x9d\x14\x99\x06\x9b\xa5G\x9a\x18\xba%\xe8\x16\xfa>Q\x1et\xb6\x98\xc5\x93 (Zl\xf6\xcdo\xa9\x0e\x13\xbc\xab\xde\xcb\xae#\xaf\x9av\xb2\x97\xeb\xd13&2i:U\xc3|K\xeb\x9b@\x9a\n\x15`\xf6\x835\xfe\xbc\xb94\xf3,o\x8c\xaa\xca\xcf\r\xd1\xf5n\x99\xd6[\xcf\x006\x1c\x963\xcd4\xd7\xf47\xd3\x8eb\x94-\xee\x9d\xf4\x1c\x94E~\x9a\x8b]K\x94\x1e\xd7\xc6%m\xcel(QFY \x14~\x93MY\xed_@\n\x1d\x1a]\xe5\x8c\x11\xe6\x01\xde\xcfM\xa2\x87ujT\xe4\x9f+\x10\x15:=\xf6B]\x02Md-as\x93\xe1\xb4\xecS$\x99k^z\'\x1b\xf1h\xd7\xda`\x06\xd3\xbcs\xf2\x10\x95\xf7\x93\xe6\xbf\xd9\xe8\x0b\x01[M\xddN\xde\xce\xc3\xd8\x13(\x1f*e\xff\xa0h\xfb`\xe7\x12\xe7J\xbc\xec\xac\xee\xf0\x10`\x8ey\xe8\x97\xb0\xcd9\xfe(\xcc\x96\x04\xc7\xbdX\xe0\xc7;\x17e\xe8}^\x07\x03\xb7q\r_d\xc5\xdcJ\xe7\xb6\xf1@\x1b\x98v\x9a\x16%"*\x1dc\x90\xc1\x15\xee\xff\xe5I\xf7\xdf\xa1Y\xc5yH\xa4O\xf6\xe6_\xd1\xfc\xbbt\xcd{\x87\xcc\x03\x83\x05\'U\xee\xeb\xa2\x9b!\x88\xe2\xef\xa9\xa1\xa5!\xb9\xff\xb6\xf2{O\xea2H\x0fF\xad\x03X\x90/v\xcf\xb3\xf8~\xef\xb3\xd8\\\x1e\x0fFH\xf9^\xdaG\xc5"\x0b\x0b\xe6WN\xf8\xf3K\x16.\t\xb0\x8b\x14\xda\xe53S\xcc\xc6\x00\xdd\xb3\xae\x8fO\xda\xed7\x9c\x11?Ysjf\xbb\nix\x17\xf3\x00\xb7\x81g\x1e|.\xd9e\xf8\xa3\xc5\xc5\x0f\\\x14\xa1f\\\xa7\xd3\x1cP\x17.B\x11\x93\xcb\x8d)\xa9\xfa\x97#\xb5\x8aM\x18\xe4\x88\x08\x1a\x19$&#\xe4\x86 !U\xabU\x98/\xf1\xa3\xc2a\xc4N\xaa\x91\x06\xc4qo`\xa2R\x16\xdc\xce\x86\xa3\xbf\xce\xc0\xcd\xfbAp\xed\x9b\xf5\xe5c\x04\xfaQ\xaf\xdd\x86\xee\xb1'
tbI300
I0
F0
tbsS'cost'
p289
g1
(g7
g3
NtRp290
(dp291
g10
S'auto_12279'
p292
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p293
(dp294
g16
(lp295
(S'deep_learning.py'
p296
I39
S'make_regression'
p297
S'self.cost += base_cost'
tp298
asbsg21
Nsg22
g1
(g23
g3
NtRp299
(dp300
g26
(lp301
g1
(g7
g3
NtRp302
(dp303
g10
S'auto_12256'
p304
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p305
(dp306
g16
(lp307
(S'deep_learning.py'
p308
I197
S'add_layer'
p309
S'self.cost += sum(self.L_reg * layer.L)'
tp310
asbsg21
Nsg22
g1
(g23
g3
NtRp311
(dp312
g26
(lp313
g1
(g7
g3
NtRp314
(dp315
g10
S'auto_12214'
p316
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p317
(dp318
g16
(lp319
(g308
I197
g309
S'self.cost += sum(self.L_reg * layer.L)'
tp320
asbsg21
Nsg22
g1
(g23
g3
NtRp321
(dp322
g26
(lp323
g1
(ctheano.tensor.var
TensorConstant
p324
g3
NtRp325
(dp326
g10
S'auto_37'
p327
sg12
Nsg13
(itheano.gof.utils
scratchpad
p328
(dp329
S'unique_value'
p330
Nsbsg21
NsS'cached'
p331
I01
sg76
g1
(g77
g3
NtRp332
(dp333
g80
(tsg82
S'int8'
p334
sg84
g85
(S'i1'
I0
I1
tRp335
(I3
S'|'
NNNI-1
I-1
I0
tbsg87
I00
sg21
NsbsS'data'
p336
g104
(g105
(I0
tS'b'
tRp337
(I1
(tg335
I00
S'\x00'
tbsbag1
(g7
g3
NtRp338
(dp339
g10
S'auto_12209'
p340
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p341
(dp342
g16
(lp343
(g308
I197
g309
S'self.cost += sum(self.L_reg * layer.L)'
tp344
asbsg21
Nsg22
g1
(g23
g3
NtRp345
(dp346
g26
(lp347
g1
(g7
g3
NtRp348
(dp349
g10
S'auto_12205'
p350
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p351
(dp352
g16
(lp353
(g308
I197
g309
S'self.cost += sum(self.L_reg * layer.L)'
tp354
asbsg21
Nsg22
g1
(g23
g3
NtRp355
(dp356
g26
(lp357
g325
ag1
(g7
g3
NtRp358
(dp359
g10
S'auto_12195'
p360
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p361
(dp362
g16
(lp363
(g308
I197
g309
S'self.cost += sum(self.L_reg * layer.L)'
tp364
asbsg21
Nsg22
g1
(g23
g3
NtRp365
(dp366
g26
(lp367
g1
(g324
g3
NtRp368
(dp369
g10
S'auto_27'
p370
sg12
Nsg13
(itheano.gof.utils
scratchpad
p371
(dp372
g330
Nsbsg21
Nsg331
I01
sg76
g1
(g77
g3
NtRp373
(dp374
g80
(tsg82
S'float32'
p375
sg84
g85
(S'f4'
I0
I1
tRp376
(I3
S'<'
NNNI-1
I-1
I0
tbsg87
I00
sg21
Nsbsg336
g104
(g105
(I0
tS'b'
tRp377
(I1
(tg376
I00
S'\x00\x00\x00\x00'
tbsbag1
(g7
g3
NtRp378
(dp379
g10
S'auto_12183'
p380
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p381
(dp382
g16
(lp383
sbsg21
Nsg22
g1
(g23
g3
NtRp384
(dp385
g26
(lp386
g1
(g7
g3
NtRp387
(dp388
g10
S'auto_12182'
p389
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p390
(dp391
g16
(lp392
(g18
I224
g19
S'self.L = numpy.array([abs(W).sum(),(W ** 2).sum()])'
tp393
asbsg21
Nsg22
g1
(g23
g3
NtRp394
(dp395
g26
(lp396
g89
asg13
(itheano.gof.utils
scratchpad
p397
(dp398
bsg116
(lp399
g387
asg118
g1
(g173
g3
NtRp400
(dp401
g176
g177
sg178
g1
(ctheano.scalar.basic
Abs
p402
g3
NtRp403
(dp404
g182
ctheano.scalar.basic
same_out
p405
sg122
g123
sg21
Nsbsg21
S'Elemwise{abs_,no_inplace}'
p406
sg122
g123
sg186
(dp407
sg188
(S'abs'
p408
I1
I1
tp409
sg190
(dp410
sg192
I00
sg193
S"|`a`|\n\n    TensorVariable overloads the `TensorVariable.__abs__` operator so that\n    this function is called when you type abs(a).\n\n    \n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p411
sbsbsg76
g1
(g77
g3
NtRp412
(dp413
g80
(I00
I00
tp414
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p415
(dp416
bsg116
(lp417
g378
asg118
g1
(ctheano.tensor.elemwise
Sum
p418
g3
NtRp419
(dp420
S'acc_dtype'
p421
g83
sg82
g83
sg122
g123
sg178
g180
sS'axis'
p422
Nsbsbsg76
g1
(g77
g3
NtRp423
(dp424
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p425
(dp426
bsg116
(lp427
g358
asg118
g1
(g173
g3
NtRp428
(dp429
g176
g177
sg178
g1
(ctheano.scalar.basic
Mul
p430
g3
NtRp431
(dp432
g182
g183
sg122
g123
sg21
S'mul'
p433
sbsg21
S'Elemwise{mul,no_inplace}'
p434
sg122
g123
sg186
(dp435
sg188
(S'multiply'
p436
I2
I1
tp437
sg190
(dp438
sg192
I00
sg193
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p439
sbsbsg76
g1
(g77
g3
NtRp440
(dp441
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p442
(dp443
bsg116
(lp444
g348
asg118
g174
sbsg76
g1
(g77
g3
NtRp445
(dp446
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp447
(dp448
g10
S'auto_12200'
p449
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p450
(dp451
g16
(lp452
(g308
I197
g309
S'self.cost += sum(self.L_reg * layer.L)'
tp453
asbsg21
Nsg22
g1
(g23
g3
NtRp454
(dp455
g26
(lp456
g1
(g324
g3
NtRp457
(dp458
g10
S'auto_12196'
p459
sg12
Nsg13
(itheano.gof.utils
scratchpad
p460
(dp461
g330
Nsbsg21
Nsg76
g1
(g77
g3
NtRp462
(dp463
g80
(tsg82
S'float64'
p464
sg84
g86
sg87
I00
sg21
Nsbsg336
g104
(g105
(I0
tS'b'
tRp465
(I1
(tg86
I00
S'-C\x1c\xeb\xe26\x1a?'
tbsbag1
(g7
g3
NtRp466
(dp467
g10
S'auto_12190'
p468
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p469
(dp470
g16
(lp471
sbsg21
Nsg22
g1
(g23
g3
NtRp472
(dp473
g26
(lp474
g1
(g7
g3
NtRp475
(dp476
g10
S'auto_12189'
p477
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p478
(dp479
g16
(lp480
(g18
I224
g19
S'self.L = numpy.array([abs(W).sum(),(W ** 2).sum()])'
tp481
asbsg21
Nsg22
g1
(g23
g3
NtRp482
(dp483
g26
(lp484
g89
ag1
(g7
g3
NtRp485
(dp486
g10
S'auto_12188'
p487
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p488
(dp489
bsg21
Nsg22
g1
(g23
g3
NtRp490
(dp491
g26
(lp492
g1
(g324
g3
NtRp493
(dp494
g10
S'auto_20'
p495
sg12
Nsg13
(itheano.gof.utils
scratchpad
p496
(dp497
g330
Nsbsg21
Nsg331
I01
sg76
g1
(g77
g3
NtRp498
(dp499
g80
(tsg82
S'int8'
p500
sg84
g335
sg87
I00
sg21
Nsbsg336
g104
(g105
(I0
tS'b'
tRp501
(I1
(tg335
I00
S'\x02'
tbsbasg13
(itheano.gof.utils
scratchpad
p502
(dp503
bsg116
(lp504
g485
asg118
g1
(g154
g3
NtRp505
(dp506
g157
(lp507
sg159
(lp508
sg161
(lp509
I0
aI1
asg163
(tsg164
I00
sg165
(S'x'
S'x'
tp510
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp511
(dp512
g80
(I01
I01
tp513
sg82
g500
sg84
g335
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p514
(dp515
bsg116
(lp516
g475
asg118
g1
(g173
g3
NtRp517
(dp518
g176
g177
sg178
g1
(ctheano.scalar.basic
Pow
p519
g3
NtRp520
(dp521
g182
g183
sg122
g123
sg21
S'pow'
p522
sbsg21
S'Elemwise{pow,no_inplace}'
p523
sg122
g123
sg186
(dp524
sg188
(S'power'
p525
I2
I1
tp526
sg190
(dp527
sg192
I00
sg193
S"elementwise power\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p528
sbsbsg76
g1
(g77
g3
NtRp529
(dp530
g80
(I00
I00
tp531
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p532
(dp533
bsg116
(lp534
g466
asg118
g1
(g418
g3
NtRp535
(dp536
g421
g83
sg82
g83
sg122
g123
sg178
g180
sg422
Nsbsbsg76
g1
(g77
g3
NtRp537
(dp538
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p539
(dp540
bsg116
(lp541
g447
asg118
g428
sbsg76
g1
(g77
g3
NtRp542
(dp543
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p544
(dp545
bsg116
(lp546
g338
asg118
g174
sbsg76
g1
(g77
g3
NtRp547
(dp548
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p549
(dp550
bsg116
(lp551
g314
asg118
g174
sbsg76
g1
(g77
g3
NtRp552
(dp553
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp554
(dp555
g10
S'auto_12252'
p556
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p557
(dp558
g16
(lp559
(g308
I197
g309
S'self.cost += sum(self.L_reg * layer.L)'
tp560
asbsg21
Nsg22
g1
(g23
g3
NtRp561
(dp562
g26
(lp563
g1
(g7
g3
NtRp564
(dp565
g10
S'auto_12248'
p566
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p567
(dp568
g16
(lp569
(g308
I197
g309
S'self.cost += sum(self.L_reg * layer.L)'
tp570
asbsg21
Nsg22
g1
(g23
g3
NtRp571
(dp572
g26
(lp573
g325
ag1
(g7
g3
NtRp574
(dp575
g10
S'auto_12238'
p576
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p577
(dp578
g16
(lp579
(g308
I197
g309
S'self.cost += sum(self.L_reg * layer.L)'
tp580
asbsg21
Nsg22
g1
(g23
g3
NtRp581
(dp582
g26
(lp583
g368
ag1
(g7
g3
NtRp584
(dp585
g10
S'auto_12226'
p586
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p587
(dp588
g16
(lp589
sbsg21
Nsg22
g1
(g23
g3
NtRp590
(dp591
g26
(lp592
g1
(g7
g3
NtRp593
(dp594
g10
S'auto_12225'
p595
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p596
(dp597
g16
(lp598
(g18
I224
g19
S'self.L = numpy.array([abs(W).sum(),(W ** 2).sum()])'
tp599
asbsg21
Nsg22
g1
(g23
g3
NtRp600
(dp601
g26
(lp602
g216
asg13
(itheano.gof.utils
scratchpad
p603
(dp604
bsg116
(lp605
g593
asg118
g400
sbsg76
g1
(g77
g3
NtRp606
(dp607
g80
(I00
I00
tp608
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p609
(dp610
bsg116
(lp611
g584
asg118
g1
(g418
g3
NtRp612
(dp613
g421
g83
sg82
g83
sg122
g123
sg178
g180
sg422
Nsbsbsg76
g1
(g77
g3
NtRp614
(dp615
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p616
(dp617
bsg116
(lp618
g574
asg118
g428
sbsg76
g1
(g77
g3
NtRp619
(dp620
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p621
(dp622
bsg116
(lp623
g564
asg118
g174
sbsg76
g1
(g77
g3
NtRp624
(dp625
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp626
(dp627
g10
S'auto_12243'
p628
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p629
(dp630
g16
(lp631
(g308
I197
g309
S'self.cost += sum(self.L_reg * layer.L)'
tp632
asbsg21
Nsg22
g1
(g23
g3
NtRp633
(dp634
g26
(lp635
g1
(g324
g3
NtRp636
(dp637
g10
S'auto_12239'
p638
sg12
Nsg13
(itheano.gof.utils
scratchpad
p639
(dp640
g330
Nsbsg21
Nsg76
g1
(g77
g3
NtRp641
(dp642
g80
(tsg82
S'float64'
p643
sg84
g86
sg87
I00
sg21
Nsbsg336
g104
(g105
(I0
tS'b'
tRp644
(I1
(tg86
I00
S'-C\x1c\xeb\xe26\x1a?'
tbsbag1
(g7
g3
NtRp645
(dp646
g10
S'auto_12233'
p647
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p648
(dp649
g16
(lp650
sbsg21
Nsg22
g1
(g23
g3
NtRp651
(dp652
g26
(lp653
g1
(g7
g3
NtRp654
(dp655
g10
S'auto_12232'
p656
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p657
(dp658
g16
(lp659
(g18
I224
g19
S'self.L = numpy.array([abs(W).sum(),(W ** 2).sum()])'
tp660
asbsg21
Nsg22
g1
(g23
g3
NtRp661
(dp662
g26
(lp663
g216
ag1
(g7
g3
NtRp664
(dp665
g10
S'auto_12231'
p666
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p667
(dp668
bsg21
Nsg22
g1
(g23
g3
NtRp669
(dp670
g26
(lp671
g493
asg13
(itheano.gof.utils
scratchpad
p672
(dp673
bsg116
(lp674
g664
asg118
g1
(g154
g3
NtRp675
(dp676
g157
(lp677
sg159
(lp678
sg161
(lp679
I0
aI1
asg163
(tsg164
I00
sg165
(S'x'
S'x'
tp680
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp681
(dp682
g80
(I01
I01
tp683
sg82
g500
sg84
g335
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p684
(dp685
bsg116
(lp686
g654
asg118
g517
sbsg76
g1
(g77
g3
NtRp687
(dp688
g80
(I00
I00
tp689
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p690
(dp691
bsg116
(lp692
g645
asg118
g1
(g418
g3
NtRp693
(dp694
g421
g83
sg82
g83
sg122
g123
sg178
g180
sg422
Nsbsbsg76
g1
(g77
g3
NtRp695
(dp696
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p697
(dp698
bsg116
(lp699
g626
asg118
g428
sbsg76
g1
(g77
g3
NtRp700
(dp701
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p702
(dp703
bsg116
(lp704
g554
asg118
g174
sbsg76
g1
(g77
g3
NtRp705
(dp706
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p707
(dp708
bsg116
(lp709
g302
asg118
g174
sbsg76
g1
(g77
g3
NtRp710
(dp711
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp712
(dp713
g10
S'auto_12275'
p714
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p715
(dp716
g16
(lp717
(g296
I36
g297
S'base_cost = T.mean(abs(self.output - self.output_variable))'
tp718
asbsg21
Nsg22
g1
(g23
g3
NtRp719
(dp720
g26
(lp721
g1
(g7
g3
NtRp722
(dp723
g10
S'auto_12265'
p724
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p725
(dp726
g16
(lp727
sbsg21
Nsg22
g1
(g23
g3
NtRp728
(dp729
g26
(lp730
g1
(g7
g3
NtRp731
(dp732
g10
S'auto_12264'
p733
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p734
(dp735
g16
(lp736
(g296
I36
g297
S'base_cost = T.mean(abs(self.output - self.output_variable))'
tp737
asbsg21
Nsg22
g1
(g23
g3
NtRp738
(dp739
g26
(lp740
g1
(g7
g3
NtRp741
(dp742
g10
S'auto_12261'
p743
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p744
(dp745
g16
(lp746
(g296
I36
g297
S'base_cost = T.mean(abs(self.output - self.output_variable))'
tp747
asbsg21
Nsg22
g1
(g23
g3
NtRp748
(dp749
g26
(lp750
g1
(g7
g3
NtRp751
(dp752
g10
S'auto_12257'
p753
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p754
(dp755
g16
(lp756
sbsg21
Nsg22
g1
(g23
g3
NtRp757
(dp758
g26
(lp759
g8
asg13
(itheano.gof.utils
scratchpad
p760
(dp761
bsg116
(lp762
g751
asg118
g1
(ctheano.tensor.basic
Flatten
p763
g3
NtRp764
(dp765
S'outdim'
p766
I1
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp767
(dp768
g80
(I00
tp769
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp770
(dp771
g10
S'auto_12168'
p772
sg12
Nsg13
(itheano.gof.utils
scratchpad
p773
(dp774
g16
(lp775
(g74
I22
g19
S"self.output_variable = T.vector('y')"
tp776
asbsg21
S'y'
sg22
Nsg76
g1
(g77
g3
NtRp777
(dp778
g80
(I00
tp779
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p780
(dp781
bsg116
(lp782
g741
asg118
g1
(g173
g3
NtRp783
(dp784
g176
g177
sg178
g1
(ctheano.scalar.basic
Sub
p785
g3
NtRp786
(dp787
g182
g183
sg122
g123
sg21
S'sub'
p788
sbsg21
S'Elemwise{sub,no_inplace}'
p789
sg122
g123
sg186
(dp790
sg188
(S'subtract'
p791
I2
I1
tp792
sg190
(dp793
sg192
I00
sg193
S"elementwise subtraction\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p794
sbsbsg76
g1
(g77
g3
NtRp795
(dp796
g80
(I00
tp797
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p798
(dp799
bsg116
(lp800
g731
asg118
g400
sbsg76
g1
(g77
g3
NtRp801
(dp802
g80
(I00
tp803
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p804
(dp805
bsg116
(lp806
g722
asg118
g1
(g418
g3
NtRp807
(dp808
g421
g83
sg82
g83
sg122
g123
sg178
g180
sg422
Nsbsbsg76
g1
(g77
g3
NtRp809
(dp810
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(g7
g3
NtRp811
(dp812
g10
S'auto_12271'
p813
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p814
(dp815
g16
(lp816
sbsg21
Nsg22
g1
(g23
g3
NtRp817
(dp818
g26
(lp819
g1
(g7
g3
NtRp820
(dp821
g10
S'auto_12269'
p822
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p823
(dp824
g16
(lp825
(g296
I36
g297
S'base_cost = T.mean(abs(self.output - self.output_variable))'
tp826
asbsg21
Nsg22
g1
(g23
g3
NtRp827
(dp828
g26
(lp829
g1
(g7
g3
NtRp830
(dp831
g10
S'auto_12266'
p832
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p833
(dp834
g16
(lp835
(S'/Library/Python/2.7/site-packages/theano/compile/ops.py'
p836
I239
S'make_node'
p837
S'return gof.Apply(self, [x], [theano.tensor.lvector()])'
tp838
asbsg21
Nsg22
g1
(g23
g3
NtRp839
(dp840
g26
(lp841
g731
asg13
(itheano.gof.utils
scratchpad
p842
(dp843
bsg116
(lp844
g830
asg118
g1
(ctheano.compile.ops
Shape
p845
g3
NtRp846
(dp847
g122
g123
sbsbsg76
g1
(g77
g3
NtRp848
(dp849
g80
(I00
tp850
sg82
S'int64'
p851
sg84
g85
(S'i8'
I0
I1
tRp852
(I3
S'<'
NNNI-1
I-1
I0
tbsg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p853
(dp854
bsg116
(lp855
g820
asg118
g1
(g173
g3
NtRp856
(dp857
g176
S'tensor.basic'
p858
sg21
Nsg178
g1
(ctheano.scalar.basic
Cast
p859
g3
NtRp860
(dp861
g182
g1
(ctheano.scalar.basic
specific_out
p862
g3
NtRp863
(dp864
S'spec'
p865
(g1
(ctheano.scalar.basic
Scalar
p866
g3
NtRp867
(dp868
g82
g83
sbtp869
sbsg122
g123
sS'o_type'
p870
g867
sg21
S'convert_to_float64'
p871
sS'ctor'
p872
cnumpy
float64
p873
sbsg186
(dp874
sg188
Nsg190
(dp875
sS'__oplist_tags'
p876
(lp877
S'casting'
p878
asg192
I00
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp879
(dp880
g80
(I00
tp881
sg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbag1
(ctheano.scalar.basic
ScalarConstant
p882
g3
NtRp883
(dp884
g10
S'auto_12270'
p885
sg12
Nsg13
(itheano.gof.utils
scratchpad
p886
(dp887
bsg21
Nsg76
g1
(g866
g3
NtRp888
(dp889
g82
g851
sbsg336
cnumpy.core.multiarray
scalar
p890
(g852
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp891
sbasg13
(itheano.gof.utils
scratchpad
p892
(dp893
bsg116
(lp894
g811
asg118
g1
(ctheano.tensor.subtensor
Subtensor
p895
g3
NtRp896
(dp897
S'idx_list'
p898
(g888
tp899
sg122
g123
sbsbsg76
g1
(g77
g3
NtRp900
(dp901
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p902
(dp903
bsg116
(lp904
g712
asg118
g1
(g173
g3
NtRp905
(dp906
g176
g177
sg178
g1
(ctheano.scalar.basic
TrueDiv
p907
g3
NtRp908
(dp909
g182
g183
sg122
g123
sg21
S'true_div'
p910
sbsg21
S'Elemwise{true_div,no_inplace}'
p911
sg122
g123
sg186
(dp912
sg188
(S'true_divide'
p913
I2
I1
tp914
sg190
(dp915
sg192
I00
sg193
S"elementwise [true] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p916
sbsbsg76
g1
(g77
g3
NtRp917
(dp918
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p919
(dp920
bsg116
(lp921
g290
asg118
g174
sbsg76
g1
(g77
g3
NtRp922
(dp923
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
NsbsbsS'params'
p924
(lp925
g89
ag136
ag216
ag246
asS'output'
p926
g751
sS'output_variable'
p927
g770
sS'score'
p928
g1
(g7
g3
NtRp929
(dp930
g10
S'auto_12290'
p931
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p932
(dp933
g16
(lp934
(g296
I40
g297
S'self.score = (param/(base_cost+param))'
tp935
asbsg21
Nsg22
g1
(g23
g3
NtRp936
(dp937
g26
(lp938
g1
(g324
g3
NtRp939
(dp940
g10
S'auto_94'
p941
sg12
Nsg13
(itheano.gof.utils
scratchpad
p942
(dp943
g330
Nsbsg21
Nsg331
I01
sg76
g1
(g77
g3
NtRp944
(dp945
g80
(tsg82
S'int8'
p946
sg84
g335
sg87
I00
sg21
Nsbsg336
g104
(g105
(I0
tS'b'
tRp947
(I1
(tg335
I00
S'\x01'
tbsbag1
(g7
g3
NtRp948
(dp949
g10
S'auto_12284'
p950
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p951
(dp952
g16
(lp953
(g296
I40
g297
S'self.score = (param/(base_cost+param))'
tp954
asbsg21
Nsg22
g1
(g23
g3
NtRp955
(dp956
g26
(lp957
g712
ag939
asg13
(itheano.gof.utils
scratchpad
p958
(dp959
bsg116
(lp960
g948
asg118
g174
sbsg76
g1
(g77
g3
NtRp961
(dp962
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbasg13
(itheano.gof.utils
scratchpad
p963
(dp964
bsg116
(lp965
g929
asg118
g905
sbsg76
g1
(g77
g3
NtRp966
(dp967
g80
(tsg82
g83
sg84
g86
sg87
I00
sg21
Nsbsbsg76
S'regression'
p968
sS'input_variable'
p969
g68
sS'output_layer'
p970
g1
(cdeep_learning
Layer
p971
g3
NtRp972
(dp973
g926
g8
sg924
(lp974
g216
ag246
asS'L'
g104
(g105
(I0
tS'b'
tRp975
(I1
(I2
tg85
(S'O8'
I0
I1
tRp976
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp977
g584
ag645
atbsbsb.